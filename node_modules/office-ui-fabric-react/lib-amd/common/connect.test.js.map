{"version":3,"sources":["common/connect.test.tsx"],"names":[],"mappings":"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","file":"common/connect.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\nimport * as ReactDOM from 'react-dom';\n\nimport * as ReactTestUtils from 'react-addons-test-utils';\nimport { connect } from './connect';\nimport { BaseStore } from './BaseStore';\nimport { StoreHost } from './StoreHost';\nimport { StoreSet } from './StoreSet';\nimport { storeKey } from './storeKey';\nimport { ISubscribable } from './ISubscribable';\n\nlet { expect } = chai;\n\ninterface ITestComponentProps extends React.HTMLProps<HTMLDivElement> { }\n\n// Dumb component.\nconst TestComponent = (props: ITestComponentProps) => (\n  <div { ...props } />\n);\n\n// Dumb store.\ninterface IHelloStore extends ISubscribable {\n  message: string;\n\n  say(message: string): void;\n}\n\ninterface IAddStore extends ISubscribable {\n  result: number;\n\n  add(num1: number, num2: number): void;\n}\n\nclass AddStore extends BaseStore implements ISubscribable {\n\n}\n\nclass HelloStore extends BaseStore implements IHelloStore {\n  public message: string = '';\n\n  public say(message) {\n    this.message = message;\n    this.emitChange();\n  }\n}\n\ndescribe('connect', () => {\n  it('can observe store changes', (done) => {\n    let hello1 = storeKey<IHelloStore>('hello1');\n    let hello2 = storeKey<IHelloStore>('hello2');\n    let localStores = new StoreSet()\n      .add(hello1, new HelloStore())\n      .add(hello2, new HelloStore());\n\n    let Connected = connect<ITestComponentProps, {}>(\n      TestComponent,\n      [hello1, hello2],\n      (props: ITestComponentProps, hello1Store: IHelloStore, hello2Store: IHelloStore) => ({\n        children: hello1Store.message + hello2Store.message\n      })\n    );\n    let root = ReactTestUtils.renderIntoDocument(\n      <div>\n        <StoreHost stores={ localStores }>\n          <Connected />\n        </StoreHost>\n      </div>\n    );\n    let rootElement = ReactDOM.findDOMNode(root as React.ReactInstance);\n\n    expect(rootElement.textContent).equals('');\n\n    localStores.getStore(hello1).say('hello');\n    setTimeout(() => {\n      try {\n        expect(rootElement.textContent).equals('hello');\n        localStores.getStore(hello2).say(' world');\n\n        setTimeout(() => {\n          try {\n            expect(rootElement.textContent).equals('hello world');\n            done();\n          } catch (e) { done(e); }\n        }, 10);\n\n      } catch (e) { done(e); }\n    }, 10);\n\n  });\n\n  it('can throw when requiring a store in an environment without any stores hosted', () => {\n    let hello = storeKey<IHelloStore>('hello');\n    let Connected = connect(\n      TestComponent,\n      [hello],\n      () => { /* empty */ }\n    );\n    let threwException = false;\n\n    try {\n      ReactTestUtils.renderIntoDocument(\n        <div>\n          <Connected />\n        </div>\n      );\n    } catch (e) { threwException = true; }\n\n    expect(threwException).to.be.true;\n  });\n\n  it('can throw in an environment that does not contain the required store', () => {\n    let hello = storeKey<IHelloStore>('hello');\n    let Connected = connect(\n      TestComponent,\n      [hello],\n      () => { /* empty */ }\n    );\n    let threwException = false;\n\n    try {\n      ReactTestUtils.renderIntoDocument(\n        <StoreHost stores={ new StoreSet() }>\n          <div>\n            <Connected />\n          </div>\n        </StoreHost>\n      );\n    } catch (e) { threwException = true; }\n\n    expect(threwException).to.be.true;\n  });\n\n  it('renders a connected component 1 time when multiple stores fire changes', (done) => {\n    let resolves = 0;\n    let renders = 0;\n\n    const Dumb = () => {\n      renders++;\n      return <div>hi</div>;\n    };\n\n    let hello1 = storeKey<IHelloStore>('hello1');\n    let hello2 = storeKey<IHelloStore>('hello2');\n    let localStores = new StoreSet()\n      .add(hello1, new HelloStore())\n      .add(hello2, new HelloStore());\n    let Connected = connect(\n      Dumb,\n      [hello1, hello2],\n      () => {\n        resolves++;\n        return {};\n      });\n\n    ReactTestUtils.renderIntoDocument(\n      <div>\n        <StoreHost stores={ localStores }>\n          <Connected />\n        </StoreHost>\n      </div>\n    );\n\n    expect(resolves).to.equal(1, 'resolve was not 1');\n    expect(renders).to.equal(1, 'render was not 1');\n\n    // Cause 2 store changes. This should setImmediate and cause 1 resolve.\n    localStores.getStore(hello1).say('hello');\n    localStores.getStore(hello2).say(' world');\n\n    setTimeout(() => {\n      try {\n        expect(resolves).to.equal(2, 'resolve was not 2');\n        expect(renders).to.equal(1, 'render was not 1');\n        done();\n      } catch (e) { done(e); }\n    }, 10);\n  });\n});\n"],"sourceRoot":"../../src"}