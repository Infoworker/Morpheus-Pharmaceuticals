{"version":3,"sources":["common/ConnectedHost.tsx"],"names":[],"mappings":"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","file":"common/ConnectedHost.js","sourcesContent":["import * as React from 'react';\nimport { ISubscribable } from './ISubscribable';\nimport { BaseComponent, autobind, assign, shallowCompare } from '../Utilities';\nimport { IStoreKey } from './storeKey';\nimport { StoreSet } from './StoreSet';\n\n// Track all components that require changes.\nlet _changedComponents: ConnectedHost[];\n\nexport interface IConnectedHostProps {\n  componentProps: any;\n  storesToSubscribe: IStoreKey<any>[];\n  component: any;\n  getProps: (stores: any, props: any) => any;\n}\n\nexport interface IConnectedHostState {\n  props: any;\n}\n\nexport class ConnectedHost extends BaseComponent<IConnectedHostProps, IConnectedHostState> {\n  public static contextTypes = {\n    stores: React.PropTypes.object\n  };\n\n  public context: {\n    stores: StoreSet;\n  };\n\n  private _stores: ISubscribable[];\n  private _changeEnqueued: boolean;\n  private _isMounted: boolean;\n\n  constructor(props: IConnectedHostProps) {\n    super(props);\n\n    this.state = {\n      props: null\n    };\n  }\n\n  public componentWillMount() {\n    if (this.props.storesToSubscribe && this.props.storesToSubscribe.length > 0) {\n      if (!this.context.stores) {\n        throw `A connected component was hosted in an environment where no stores were hosted. Use the StoreHost to host components.`;\n      }\n\n      // Resolve and subscribe to stores.\n      this._stores = this.props.storesToSubscribe.map(storeKey => {\n        let store = this.context.stores.getStore(storeKey);\n\n        if (!store) {\n          throw `The \"${storeKey.name}\" store was required by a connected component, but not exposed.`;\n        }\n        this._disposables.push(store.subscribe(this._onStoreChanged));\n\n        return store;\n      });\n    }\n\n    // We can only initialize state at this point, where context has been resolved.\n    this.state = {\n      props: this._getComponentProps(this.props)\n    };\n  }\n\n  public componentDidMount() {\n    this._isMounted = true;\n  }\n\n  public componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  public componentWillReceiveProps(newProps) {\n    this._updateProps(newProps);\n  }\n\n  public shouldComponentUpdate(newProps: IConnectedHostProps, newState) {\n    let inputPropsHaveChanged = !shallowCompare(this.props.componentProps, newProps.componentProps);\n    let computedPropsHaveChanged = !shallowCompare(this.state.props, newState.props);\n    let shouldUpdate = inputPropsHaveChanged || computedPropsHaveChanged;\n\n    return shouldUpdate;\n  }\n\n  public render() {\n    let { component: Component } = this.props;\n    let { props } = this.state;\n\n    return props ? <Component { ...props } /> : null;\n  }\n\n  @autobind\n  private _onStoreChanged() {\n    let { storesToSubscribe } = this.props;\n\n    if (!storesToSubscribe || storesToSubscribe.length < 2) {\n      this._updateProps();\n    } else if (!this._changeEnqueued) {\n      if (!_changedComponents) {\n        _changedComponents = [];\n        this._async.setImmediate(() => {\n          _changedComponents.forEach(comp => comp._updateProps());\n          _changedComponents = null;\n        });\n      }\n      _changedComponents.push(this);\n      this._changeEnqueued = true;\n    }\n  }\n\n  @autobind\n  private _updateProps(props?: any) {\n    this._changeEnqueued = false;\n    props = this._getComponentProps(props || this.props);\n    this.setState({ props });\n  }\n\n  private _getComponentProps(props: any) {\n    let newProps = assign(\n      {},\n      props.componentProps,\n      props.getProps(props.componentProps, ...this._stores));\n\n    return newProps;\n  }\n}\n"],"sourceRoot":"../../src"}