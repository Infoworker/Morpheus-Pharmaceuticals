{"version":3,"sources":["components/FocusTrapZone/FocusTrapZone.tsx"],"names":[],"mappings":"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","file":"components/FocusTrapZone/FocusTrapZone.js","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  KeyCodes,\n  autobind,\n  elementContains,\n  getNativeProps,\n  divProperties\n} from '../../Utilities';\nimport { IFocusTrapZone, IFocusTrapZoneProps } from './FocusTrapZone.Props';\nimport {\n  getFirstFocusable,\n  getLastFocusable,\n  getNextElement\n} from '../../utilities/focus';\n\nexport class FocusTrapZone extends BaseComponent<IFocusTrapZoneProps, {}> implements IFocusTrapZone {\n\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement\n  };\n\n  private _previouslyFocusedElement: HTMLElement;\n\n  public componentDidMount() {\n    let { elementToFocusOnDismiss, isClickableOutsideFocusTrap = false, forceFocusInsideTrap = true } = this.props;\n\n    this._previouslyFocusedElement = elementToFocusOnDismiss ? elementToFocusOnDismiss : document.activeElement as HTMLElement;\n    this.focus();\n\n    if (forceFocusInsideTrap) {\n      this._events.on(window, 'focus', this._forceFocusInTrap, true);\n    }\n\n    if (!isClickableOutsideFocusTrap) {\n      this._events.on(window, 'click', this._forceClickInTrap, true);\n    }\n  }\n\n  public componentWillUnmount() {\n    let { ignoreExternalFocusing } = this.props;\n\n    if (!ignoreExternalFocusing && this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n    }\n  }\n\n  public render() {\n    let { className, ariaLabelledBy } = this.props;\n    let divProps = getNativeProps(this.props, divProperties);\n\n    return (\n      <div\n        { ...divProps }\n        className={ className }\n        ref='root'\n        aria-labelledby={ ariaLabelledBy }\n        onKeyDown={ this._onKeyboardHandler }>\n        { this.props.children }\n      </div>\n    );\n  }\n\n  /**\n   * Need to expose this method in case of popups since focus needs to be set when popup is opened\n   */\n  public focus() {\n    let { firstFocusableSelector } = this.props;\n    let _firstFocusableChild;\n    let root = this.refs.root;\n\n    if (firstFocusableSelector) {\n      _firstFocusableChild = root.querySelector('.' + firstFocusableSelector);\n    } else {\n      _firstFocusableChild = getNextElement(root, root.firstChild as HTMLElement, true, false, false, true);\n    }\n    if (_firstFocusableChild) {\n      _firstFocusableChild.focus();\n    }\n  }\n\n  @autobind\n  private _onKeyboardHandler(ev: React.KeyboardEvent<HTMLElement>) {\n    if (ev.which !== KeyCodes.tab) {\n      return;\n    }\n\n    let { root } = this.refs;\n\n    const _firstFocusableChild = getFirstFocusable(root, root.firstChild as HTMLElement, true);\n    const _lastFocusableChild = getLastFocusable(root, root.lastChild as HTMLElement, true);\n\n    if (ev.shiftKey && _firstFocusableChild === ev.target) {\n      _lastFocusableChild.focus();\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if (!ev.shiftKey && _lastFocusableChild === ev.target) {\n      _firstFocusableChild.focus();\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _forceFocusInTrap(ev: FocusEvent) {\n    const focusedElement = document.activeElement as HTMLElement;\n\n    if (!elementContains(this.refs.root, focusedElement)) {\n      this.focus();\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _forceClickInTrap(ev: MouseEvent) {\n    const clickedElement = ev.target as HTMLElement;\n\n    if (clickedElement && !elementContains(this.refs.root, clickedElement)) {\n      this.focus();\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n}"],"sourceRoot":"../../../src"}