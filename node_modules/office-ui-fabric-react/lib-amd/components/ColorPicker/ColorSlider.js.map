{"version":3,"sources":["components/ColorPicker/ColorSlider.tsx"],"names":[],"mappings":"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","file":"components/ColorPicker/ColorSlider.js","sourcesContent":["import * as React from 'react';\nimport { autobind } from '../../utilities/autobind';\nimport { css } from '../../utilities/css';\nimport { EventGroup } from '../../utilities/eventGroup/EventGroup';\n\nexport interface IColorSliderProps {\n  minValue?: number;\n  maxValue?: number;\n  initialValue?: number;\n  thumbColor?: string;\n  overlayStyle?: any;\n  onChanged?: (newValue: number) => void;\n\n  className?: string;\n  style?: any;\n}\n\nexport interface IColorSliderState {\n  isAdjusting?: boolean;\n  origin?: { x: number, originalValue: number };\n  currentValue?: number;\n}\n\nexport class ColorSlider extends React.Component<IColorSliderProps, IColorSliderState> {\n  public static defaultProps = {\n    minValue: 0,\n    maxValue: 100,\n    thumbColor: 'inherit',\n    initialValue: 0\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n    root: HTMLElement;\n  };\n\n  private _events: EventGroup;\n\n  constructor(props: IColorSliderProps) {\n    super(props);\n\n    let { initialValue } = this.props;\n\n    this._events = new EventGroup(this);\n\n    this.state = {\n      isAdjusting: false,\n      origin: null,\n      currentValue: initialValue\n    };\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n  }\n\n  public render() {\n    let { className, minValue, maxValue, overlayStyle } = this.props;\n    let { currentValue, isAdjusting } = this.state;\n\n    let currentPercentage = 100 * (currentValue - minValue) / (maxValue - minValue);\n\n    return (\n      <div\n        ref='root'\n        className={ css('ms-ColorPicker-slider', className, {\n          'is-adjusting': isAdjusting\n        })}\n        onMouseDown={ this._onMouseDown }>\n        <div className='ms-ColorPicker-sliderOverlay' style={ overlayStyle } />\n        <div className='ms-ColorPicker-thumb is-slider' style={ { left: currentPercentage + '%' } }/>\n      </div>\n    );\n  }\n\n  @autobind\n  private _onMouseDown(ev: React.MouseEvent<HTMLElement>) {\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\n    this._events.on(window, 'mouseup', this._onMouseUp, true);\n\n    this._onMouseMove(ev);\n  }\n\n  @autobind\n  private _onMouseMove(ev: React.MouseEvent<HTMLElement>) {\n    let { onChanged, minValue, maxValue } = this.props;\n    let rectSize = this.refs.root.getBoundingClientRect();\n\n    let currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    let newValue = Math.min(maxValue, Math.max(minValue, currentPercentage * maxValue));\n\n    this.setState({\n      isAdjusting: true,\n      currentValue: newValue\n    });\n\n    if (onChanged) {\n      onChanged(newValue);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  @autobind\n  private _onMouseUp(ev: React.MouseEvent<HTMLElement>) {\n    this._events.off();\n\n    this.setState({\n      isAdjusting: false,\n      origin: null\n    });\n  }\n\n}\n"],"sourceRoot":"../../../src"}