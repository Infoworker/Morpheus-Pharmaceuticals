{"version":3,"sources":["components/TextField/TextField.test.tsx"],"names":[],"mappings":"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","file":"components/TextField/TextField.test.js","sourcesContent":["import 'es6-promise';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as ReactTestUtils from 'react-addons-test-utils';\n\nimport { TextField } from './TextField';\n\nconst expect: Chai.ExpectStatic = chai.expect;\n\ndescribe('TextField', () => {\n  function renderIntoDocument(element: React.ReactElement<any>): HTMLElement {\n    const component = ReactTestUtils.renderIntoDocument(element);\n    const renderedDOM: Element = ReactDOM.findDOMNode(component as React.ReactInstance);\n    return renderedDOM as HTMLElement;\n  }\n\n  function mockEvent(targetValue: string = ''): React.SyntheticEvent<HTMLElement> {\n    const target: EventTarget = { value: targetValue } as HTMLInputElement;\n    const event: React.SyntheticEvent<HTMLElement> = { target } as React.SyntheticEvent<HTMLElement>;\n    return event;\n  }\n\n  function delay(millisecond: number): Promise<void> {\n    return new Promise<void>((resolve) => setTimeout(resolve, millisecond));\n  }\n\n  it('should render label and value to input element', () => {\n    const exampleLabel: string = 'this is label';\n    const exampleValue: string = 'this is value';\n\n    const renderedDOM: HTMLElement = renderIntoDocument(\n      <TextField\n        label={ exampleLabel }\n        value={ exampleValue }\n      />\n    );\n\n    // Assert on the input element.\n    const inputDOM: HTMLInputElement = renderedDOM.getElementsByTagName('input')[0];\n    expect(inputDOM.value).to.equal(exampleValue);\n    expect(inputDOM.getAttribute('label')).to.equal(exampleLabel);\n\n    // Assert on the label element.\n    const labelDOM: HTMLLabelElement = renderedDOM.getElementsByTagName('label')[0];\n    expect(labelDOM.textContent).to.equal(exampleLabel);\n  });\n\n  it('should render multiline as text area element', () => {\n    const renderedDOM: HTMLElement = renderIntoDocument(\n      <TextField value='This\\nIs\\nMultiline\\nText\\n' multiline />\n    );\n\n    // Assert on the input element.\n    const inputDOM: HTMLTextAreaElement = renderedDOM.getElementsByTagName('textarea')[0];\n    expect(inputDOM.value).not.be.be.empty;\n  });\n\n  it('should associate the label and input box', () => {\n    const renderedDOM: HTMLElement = renderIntoDocument(\n      <TextField\n        label='text-field-label'\n        value='whatever value'\n      />\n    );\n\n    const inputDOM: HTMLInputElement = renderedDOM.getElementsByTagName('input')[0];\n    const labelDOM: HTMLLabelElement = renderedDOM.getElementsByTagName('label')[0];\n\n    // Assert the input ID and label FOR attribute are the same.\n    expect(inputDOM.id).to.not.be.empty;\n    expect(inputDOM.id).to.equal(labelDOM.htmlFor);\n  });\n\n  it('should render a disabled input element', () => {\n    const renderedDOM: HTMLElement = renderIntoDocument(\n      <TextField disabled={ true } />\n    );\n\n    // Assert the input box is disabled.\n    const inputDOM: HTMLInputElement = renderedDOM.getElementsByTagName('input')[0];\n    expect(inputDOM.disabled).to.equal(true);\n  });\n\n  describe('error message', () => {\n    const errorMessage: string = 'The string is too long, should not exceed 3 characters.';\n\n    function assertErrorMessage(renderedDOM: HTMLElement, expectedErrorMessage: string | boolean): void {\n      const errorMessageDOM: HTMLElement =\n        renderedDOM.querySelector('[data-automation-id=error-message]') as HTMLElement;\n\n      if (expectedErrorMessage === false) {\n        expect(errorMessageDOM).to.be.null; // element not exists\n      } else {\n        expect(errorMessageDOM.textContent).to.equal(expectedErrorMessage);\n      }\n    }\n\n    it('should render error message when onGetErrorMessage returns a string', () => {\n      function validator(value: string): string {\n        return value.length > 3 ? errorMessage : '';\n      }\n\n      const renderedDOM: HTMLElement = renderIntoDocument(\n        <TextField\n          label='text-field-label'\n          value='whatever value'\n          onGetErrorMessage={ validator }\n        />\n      );\n\n      const inputDOM: HTMLInputElement = renderedDOM.getElementsByTagName('input')[0];\n      ReactTestUtils.Simulate.change(inputDOM, mockEvent('the input value'));\n\n      // The value is delayed to validate, so it must to query error message after a while.\n      return delay(250).then(() => assertErrorMessage(renderedDOM, errorMessage));\n    });\n\n    it('should render error message when onGetErrorMessage returns a Promise<string>', () => {\n      function validator(value: string): Promise<string> {\n        return Promise.resolve(value.length > 3 ? errorMessage : '');\n      }\n\n      const renderedDOM: HTMLElement = renderIntoDocument(\n        <TextField\n          label='text-field-label'\n          value='whatever value'\n          onGetErrorMessage={ validator }\n        />\n      );\n\n      const inputDOM: HTMLInputElement = renderedDOM.getElementsByTagName('input')[0];\n      ReactTestUtils.Simulate.change(inputDOM, mockEvent('the input value'));\n\n      // The value is delayed to validate, so it must to query error message after a while.\n      return delay(250).then(() => assertErrorMessage(renderedDOM, errorMessage));\n    });\n\n    it('should render error message on first render when onGetErrorMessage returns a string', () => {\n      const renderedDOM: HTMLElement = renderIntoDocument(\n        <TextField\n          label='text-field-label'\n          value='whatever value'\n          onGetErrorMessage={ () => errorMessage }\n        />\n      );\n\n      assertErrorMessage(renderedDOM, errorMessage);\n    });\n\n    it('should render error message on first render when onGetErrorMessage returns a Promise<string>', () => {\n      const renderedDOM: HTMLElement = renderIntoDocument(\n        <TextField\n          label='text-field-label'\n          value='whatever value'\n          onGetErrorMessage={ () => Promise.resolve(errorMessage) }\n        />\n      );\n\n      // The Promise based validation need to assert with async pattern.\n      return delay(1).then(() => assertErrorMessage(renderedDOM, errorMessage));\n    });\n\n    it('should not render error message when onGetErrorMessage return an empty string', () => {\n      const renderedDOM: HTMLElement = renderIntoDocument(\n        <TextField\n          label='text-field-label'\n          value='whatever value'\n          onGetErrorMessage={ () => '' }\n        />\n      );\n\n      assertErrorMessage(renderedDOM, /* exist */ false);\n    });\n\n    it('should not render error message when no value is provided', () => {\n      let actualValue: string = undefined;\n\n      const renderedDOM: HTMLElement = renderIntoDocument(\n        <TextField\n          label='text-field-label'\n          onGetErrorMessage={ (value: string) => actualValue = value }\n        />\n      );\n\n      assertErrorMessage(renderedDOM, /* exist */ false);\n      expect(actualValue).to.equal('');\n    });\n\n    it('should update error message when receive new value from props', () => {\n      function validator(value: string): string {\n        return value.length > 3 ? errorMessage : '';\n      }\n\n      const renderedDOM: HTMLElement = renderIntoDocument(\n        <TextField\n          value='initial value'\n          onGetErrorMessage={ validator }\n        />\n      );\n\n      assertErrorMessage(renderedDOM, errorMessage);\n\n      ReactDOM.render(\n        <TextField\n          value=''\n          onGetErrorMessage={ validator }\n        />,\n        renderedDOM.parentElement\n      );\n\n      return delay(250).then(() => assertErrorMessage(renderedDOM, /* exist */ false));\n    });\n  });\n});\n"],"sourceRoot":"../../../src"}