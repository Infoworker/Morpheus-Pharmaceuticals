{"version":3,"sources":["components/TextField/TextField.tsx"],"names":[],"mappings":"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","file":"components/TextField/TextField.js","sourcesContent":["import * as React from 'react';\nimport { ITextFieldProps } from './TextField.Props';\nimport { Label } from '../../Label';\nimport {\n  Async,\n  getId,\n  css,\n  getNativeProps,\n  inputProperties,\n  textAreaProperties\n} from '../../Utilities';\nimport './TextField.scss';\n\nexport interface ITextFieldState {\n  value?: string;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * The validation error message.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  errorMessage?: string;\n}\n\nexport class TextField extends React.Component<ITextFieldProps, ITextFieldState> {\n  public static defaultProps: ITextFieldProps = {\n    multiline: false,\n    resizable: true,\n    underlined: false,\n    onChanged: () => { /* noop */ },\n    onBeforeChange: () => { /* noop */ },\n    onNotifyValidationResult: () => { /* noop */ },\n    onGetErrorMessage: () => undefined,\n    deferredValidationTime: 200,\n    errorMessage: ''\n  };\n\n  private _id: string;\n  private _descriptionId: string;\n  private _async: Async;\n  private _delayedValidate: (value: string) => void;\n  private _isMounted: boolean;\n  private _lastValidation: number;\n  private _latestValidateValue;\n  private _willMountTriggerValidation;\n  private _field;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    this._id = getId('TextField');\n    this._descriptionId = getId('TextFieldDescription');\n    this._async = new Async(this);\n\n    this.state = {\n      value: props.value || props.defaultValue || '',\n      isFocused: false,\n      errorMessage: ''\n    };\n\n    this._onInputChange = this._onInputChange.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onBlur = this._onBlur.bind(this);\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n    this._willMountTriggerValidation = false;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string {\n    return this.state.value;\n  }\n\n  public componentWillMount() {\n    this._willMountTriggerValidation = true;\n    this._validate(this.state.value);\n  }\n\n  public componentDidMount() {\n    this._isMounted = true;\n  }\n\n  public componentWillReceiveProps(newProps: ITextFieldProps) {\n    const { onBeforeChange } = this.props;\n\n    if (newProps.value !== undefined && newProps.value !== this.state.value) {\n      if (onBeforeChange) {\n        onBeforeChange(newProps.value);\n      }\n\n      this.setState({\n        value: newProps.value,\n        errorMessage: ''\n      } as ITextFieldState);\n\n      this._delayedValidate(newProps.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n    this._isMounted = false;\n  }\n\n  public render() {\n    let { disabled, required, multiline, underlined, label, description, iconClass, className } = this.props;\n    let { isFocused } = this.state;\n    const errorMessage: string = this._errorMessage;\n\n    const textFieldClassName = css('ms-TextField', className, {\n      'is-required': required,\n      'is-disabled': disabled,\n      'is-active': isFocused,\n      'ms-TextField--multiline': multiline,\n      'ms-TextField--underlined': underlined\n    });\n\n    return (\n      <div className={ textFieldClassName }>\n        { label && <Label htmlFor={ this._id }>{ label }</Label> }\n        { iconClass && <i className={ iconClass }></i> }\n        { multiline ? this._renderTextArea() : this._renderInput() }\n        { errorMessage && <div aria-live='assertive' className='ms-u-screenReaderOnly' data-automation-id='error-message'>{ errorMessage }</div> }\n        { (description || errorMessage) &&\n          <span id={ this._descriptionId }>\n            { description && <span className='ms-TextField-description'>{ description }</span> }\n            { errorMessage && <p className='ms-TextField-errorMessage ms-u-slideDownIn20'>{ errorMessage }</p> }\n          </span>\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._field) {\n      this._field.focus();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._field) {\n      this._field.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number) {\n    if (this._field) {\n      this._field.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number) {\n    if (this._field) {\n      this._field.selectionEnd = value;\n    }\n  }\n\n  private _onFocus(ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true });\n  }\n\n  private _onBlur(ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false });\n  }\n\n  private get _fieldClassName(): string {\n    const errorMessage: string = this._errorMessage;\n    let textFieldClassName: string;\n\n    if (this.props.multiline && !this.props.resizable) {\n      textFieldClassName = 'ms-TextField-field ms-TextField-field--unresizable';\n    } else {\n      textFieldClassName = 'ms-TextField-field';\n    }\n\n    return css(textFieldClassName, {\n      'ms-TextField-invalid': !!errorMessage\n    });\n  }\n\n  private get _errorMessage(): string {\n    let { errorMessage } = this.state;\n    if (!errorMessage) {\n      errorMessage = this.props.errorMessage;\n    }\n\n    return errorMessage;\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLProps<HTMLAreaElement>> {\n    let textAreaProps = getNativeProps(this.props, textAreaProperties);\n\n    return (\n      <textarea\n        { ...textAreaProps }\n        id={ this._id }\n        ref={ (c): HTMLTextAreaElement => this._field = c }\n        value={ this.state.value }\n        onChange={ this._onInputChange }\n        className={ this._fieldClassName }\n        aria-label={ this.props.ariaLabel }\n        aria-describedby={ this._descriptionId }\n        aria-invalid={ !!this.state.errorMessage }\n        onFocus={ this._onFocus }\n        onBlur={ this._onBlur }\n        />\n    );\n  }\n\n  private _renderInput(): React.ReactElement<React.HTMLProps<HTMLInputElement>> {\n    let inputProps = getNativeProps<React.HTMLProps<HTMLInputElement>>(this.props, inputProperties);\n\n    return (\n      <input\n        type={ 'text' }\n        { ...inputProps }\n        id={ this._id }\n        ref={ (c): HTMLInputElement => this._field = c }\n        value={ this.state.value }\n        onChange={ this._onInputChange }\n        className={ this._fieldClassName }\n        aria-label={ this.props.ariaLabel }\n        aria-describedby={ this._descriptionId }\n        aria-invalid={ !!this.state.errorMessage }\n        onFocus={ this._onFocus }\n        onBlur={ this._onBlur }\n        />\n    );\n  }\n\n  private _onInputChange(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n    const value: string = element.value;\n\n    this.setState({\n      value: value,\n      errorMessage: ''\n    } as ITextFieldState);\n    this._willMountTriggerValidation = false;\n    this._delayedValidate(value);\n    const { onBeforeChange } = this.props;\n    onBeforeChange(value);\n  }\n\n  private _validate(value: string): void {\n    // In case of _validate called multi-times during executing validate logic with promise return.\n    if (this._latestValidateValue === value) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    let { onGetErrorMessage } = this.props;\n    let result: string | PromiseLike<string> = onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string') {\n        this.setState({\n          errorMessage: result\n        } as ITextFieldState);\n        this._notifyAfterValidate(value, result);\n      } else {\n        let currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string) => {\n          if (this._isMounted && currentValidation === this._lastValidation) {\n            this.setState({ errorMessage } as ITextFieldState);\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string, errorMessage: string): void {\n    if (!this._willMountTriggerValidation && value === this.state.value) {\n      const { onNotifyValidationResult } = this.props;\n      onNotifyValidationResult(errorMessage, value);\n      if (!errorMessage) {\n        const { onChanged } = this.props;\n        onChanged(value);\n      }\n    } else {\n      this._willMountTriggerValidation = false;\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}