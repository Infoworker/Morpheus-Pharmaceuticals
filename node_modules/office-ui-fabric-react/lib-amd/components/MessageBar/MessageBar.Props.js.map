{"version":3,"sources":["components/MessageBar/MessageBar.Props.ts"],"names":[],"mappings":";;IAwCA,WAAY,cAAc;QACxB,6BAA6B;QAC7B,mDAAI,CAAA;QACJ,8BAA8B;QAC9B,qDAAK,CAAA;QACL,gCAAgC;QAChC,yDAAO,CAAA;QACP,sCAAsC;QACtC,qEAAa,CAAA;QACb,gCAAgC;QAChC,yDAAO,CAAA;QACP,gCAAgC;QAChC,yDAAO,CAAA;QACP;;;WAGG;QACH,uDAAM,CAAA;IACR,CAAC,EAlBW,sBAAc,KAAd,sBAAc,QAkBzB;IAlBD,IAAY,cAAc,GAAd,sBAkBX,CAAA","file":"components/MessageBar/MessageBar.Props.js","sourcesContent":["import * as React from 'react';\n\nexport interface IMessageBarProps extends React.HTMLProps<HTMLElement> {\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n   /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n}\n\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info,\n  /** Error styled MessageBar */\n  error,\n  /** Blocked styled MessageBar */\n  blocked,\n  /** SevereWarning styled MessageBar */\n  severeWarning,\n  /** Success styled MessageBar */\n  success,\n  /** Warning styled MessageBar */\n  warning,\n  /**\n   * @deprecated\n   * Deprecated at v0.48.0, to be removed at >= v1.0.0. Use 'blocked' instead.\n   */\n  remove\n}\n"],"sourceRoot":"../../../src"}