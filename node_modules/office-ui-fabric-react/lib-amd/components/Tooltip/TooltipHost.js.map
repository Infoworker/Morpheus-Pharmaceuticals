{"version":3,"sources":["components/Tooltip/TooltipHost.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IASA;QAAiC,+BAAqC;QASpE,cAAc;QACd,qBAAY,KAAwB;YAClC,kBAAM,KAAK,CAAC,CAAC;YAEb,IAAI,CAAC,KAAK,GAAG;gBACX,gBAAgB,EAAE,KAAK;aACxB,CAAC;QACJ,CAAC;QAED,SAAS;QACF,4BAAM,GAAb;YACE,IAAA,eAA8D,EAAxD,oBAAO,EAAE,sBAAQ,EAAE,oCAAe,EAAE,gBAAK,CAAgB;YACzD,kDAAgB,CAAgB;YAEtC,MAAM,CAAC,CACL,qBAAC,GAAG,aACF,SAAS,EAAC,gBAAgB,EAC1B,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAG,GACnC,EAAE,cAAc,EAAE,IAAI,CAAC,oBAAoB,EAAE,EAC7C,EAAE,aAAa,EAAE,IAAI,CAAC,oBAAoB,EAAE,GACjD,YAAY,EAAG,IAAI,CAAC,oBAAsB,EAC1C,YAAY,EAAG,IAAI,CAAC,oBAAsB;gBAExC,QAAU;gBACV,gBAAgB,GAAG,CACnB,oBAAC,eAAO,YACN,KAAK,EAAG,KAAO,EACf,OAAO,EAAG,OAAS,EACnB,aAAa,EAAG,IAAI,CAAC,YAAc,EACnC,eAAe,EAAG,eAAiB,GAC9B,2BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,0BAAa,CAAC,EAEtC,CACX,GAAG,CAAC,IAAI,CAAG,CACR,CACP,CAAC;QACJ,CAAC;QAED,eAAe;QAEP,0CAAoB,GAA5B,UAA6B,EAAO;YAClC,IAAI,CAAC,QAAQ,CAAC;gBACZ,gBAAgB,EAAE,IAAI;aACvB,CAAC,CAAC;QACL,CAAC;QAED,eAAe;QAEP,0CAAoB,GAA5B,UAA6B,EAAO;YAClC,IAAI,CAAC,QAAQ,CAAC;gBACZ,gBAAgB,EAAE,KAAK;aACxB,CAAC,CAAC;QACL,CAAC;QA3Da,wBAAY,GAAG;YAC3B,KAAK,EAAE,oBAAY,CAAC,MAAM;SAC3B,CAAC;QA4CF;YAAC,mBAAQ;+DAAA;QAQT;YAAC,mBAAQ;+DAAA;QAMX,kBAAC;IAAD,CA9DA,AA8DC,CA9DgC,6BAAa,GA8D7C;IA9DY,mBAAW,cA8DvB,CAAA","file":"components/Tooltip/TooltipHost.js","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\nimport { BaseComponent } from '../../common/BaseComponent';\nimport { ITooltipHostProps } from './TooltipHost.Props';\nimport { getNativeProps, divProperties } from '../../utilities/properties';\nimport { autobind } from '../../utilities/autobind';\nimport { Tooltip, TooltipDelay } from './index';\n\nexport class TooltipHost extends BaseComponent<ITooltipHostProps, any> {\n\n  public static defaultProps = {\n    delay: TooltipDelay.medium\n  };\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost: HTMLElement;\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    this.state = {\n      isTooltipVisible: false,\n    };\n  }\n\n  // Render\n  public render() {\n    let { content, children, directionalHint, delay } = this.props;\n    let { isTooltipVisible } = this.state;\n\n    return (\n      <div\n        className='ms-TooltipHost'\n        ref={ this._resolveRef('_tooltipHost') }\n        { ...{ onFocusCapture: this._onTooltipMouseEnter } }\n        { ...{ onBlurCapture: this._onTooltipMouseLeave } }\n        onMouseEnter={ this._onTooltipMouseEnter }\n        onMouseLeave={ this._onTooltipMouseLeave }\n        >\n        { children }\n        { isTooltipVisible ? (\n          <Tooltip\n            delay={ delay }\n            content={ content }\n            targetElement={ this._tooltipHost }\n            directionalHint={ directionalHint }\n            { ...getNativeProps(this.props, divProperties) }\n            >\n          </Tooltip>\n        ) : (null) }\n      </div>\n    );\n  }\n\n  // Show Tooltip\n  @autobind\n  private _onTooltipMouseEnter(ev: any) {\n    this.setState({\n      isTooltipVisible: true\n    });\n  }\n\n  // Hide Tooltip\n  @autobind\n  private _onTooltipMouseLeave(ev: any) {\n    this.setState({\n      isTooltipVisible: false\n    });\n  }\n}"],"sourceRoot":"../../../src"}