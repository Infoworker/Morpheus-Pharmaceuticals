{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAmBA;QAA8B,4BAA6C;QAOzE,kBAAY,KAAqB;YAC/B,kBAAM,KAAK,CAAC,CAAC;YAEb,IAAI,CAAC,GAAG,GAAG,cAAK,CAAC,WAAW,CAAC,CAAC;YAC9B,IAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,KAAK,CAAC,cAAc,IAAI,KAAK;aACzC,CAAC;QACJ,CAAC;QAEM,yBAAM,GAAb;YACE,IAAA,eAOc,EANZ,oBAAO,EACP,wBAAS,EACT,kCAAc,EACd,sBAAQ,EACR,0BAAU,EACV,gBAAK,CACQ;YAEP,oCAAS,CAAgB;YACjC,IAAM,SAAS,GAAG,OAAO,KAAK,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC;YAEzE,MAAM,CAAC,CACL,qBAAC,GAAG,IACF,SAAS,EAAG,SAAG,CAAC,aAAa,EAAE,SAAS,EAAE,EAAE,YAAY,EAAE,SAAS,EAAE,CAAG;gBAExE,qBAAC,KAAK,gBACC,UAAU,EACV,CAAC,OAAO,KAAK,SAAS,IAAI,EAAE,gBAAO,EAAE,CAAC,EACtC,CAAC,cAAc,KAAK,SAAS,IAAI,EAAE,8BAAc,EAAE,CAAC,GACzD,QAAQ,EAAG,QAAU,EACrB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAG,EACrC,EAAE,EAAG,IAAI,CAAC,GAAK,EACf,IAAI,EAAG,IAAI,CAAC,GAAK,EACjB,SAAS,EAAC,mBAAmB,EAC7B,IAAI,EAAC,UAAU,EACf,QAAQ,EAAG,IAAI,CAAC,SAAW,EAC3B,OAAO,EAAG,IAAI,CAAC,QAAU,EACzB,MAAM,EAAG,IAAI,CAAC,OAAS,GACvB,YAAY,GAAG,SAAW,GACxB;gBACF,IAAI,CAAC,KAAK,CAAC,QAAU;gBACvB,qBAAC,KAAK,IAAC,OAAO,EAAG,IAAI,CAAC,GAAK,EACzB,SAAS,EAAG,SAAG,CAAC,mBAAmB,EAAE;oBACnC,YAAY,EAAE,SAAS;oBACvB,aAAa,EAAE,QAAQ;iBACxB,CACA,GAEC,KAAK,IAAI,qBAAC,IAAI,IAAC,SAAS,EAAC,UAAU,GAAG,KAAO,CAAS,CAClD,CACJ,CACP,CAAC;QACJ,CAAC;QAED,sBAAW,6BAAO;iBAAlB;gBACE,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,KAAK,CAAC;YACzD,CAAC;;;WAAA;QAEM,wBAAK,GAAZ;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC;QACH,CAAC;QAGO,2BAAQ,GAAhB,UAAiB,EAAsC;YAC7C,sCAAU,CAAgB;YAElC,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACzB,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACrC,CAAC;QAGO,0BAAO,GAAf,UAAgB,EAAsC;YAC5C,sCAAU,CAAgB;YAElC,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;gBACpC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACxB,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QACtC,CAAC;QAGO,4BAAS,GAAjB,UAAkB,EAAqC;YAC7C,kCAAQ,CAAgB;YAChC,IAAM,SAAS,GAAI,EAAE,CAAC,MAA2B,CAAC,OAAO,CAAC;YAE1D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,QAAQ,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;YAC1B,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;gBACrC,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC;QA1Ga,qBAAY,GAAmB,EAC5C,CAAC;QAuEF;YAAC,mBAAQ;gDAAA;QAWT;YAAC,mBAAQ;+CAAA;QAWT;YAAC,mBAAQ;iDAAA;QAaX,eAAC;IAAD,CA5GA,AA4GC,CA5G6B,6BAAa,GA4G1C;IA5GY,gBAAQ,WA4GpB,CAAA","file":"components/Checkbox/Checkbox.js","sourcesContent":["import * as React from 'react';\nimport { BaseComponent } from '../../common/BaseComponent';\nimport {\n  ICheckbox,\n  ICheckboxProps\n} from './Checkbox.Props';\nimport { autobind } from '../../utilities/autobind';\nimport { css } from '../../utilities/css';\nimport { getId } from '../../utilities/object';\nimport './Checkbox.scss';\n\nexport interface ICheckboxState {\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /** Is true when Uncontrolled control is checked. */\n  isChecked?: boolean;\n}\n\nexport class Checkbox extends BaseComponent<ICheckboxProps, ICheckboxState> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n  };\n\n  private _id: string;\n  private _checkBox: HTMLInputElement;\n\n  constructor(props: ICheckboxProps) {\n    super(props);\n\n    this._id = getId('checkbox-');\n    this.state = {\n      isFocused: false,\n      isChecked: props.defaultChecked || false\n    };\n  }\n\n  public render() {\n    const {\n      checked,\n      className,\n      defaultChecked,\n      disabled,\n      inputProps,\n      label\n    } = this.props;\n\n    const { isFocused } = this.state;\n    const isChecked = checked === undefined ? this.state.isChecked : checked;\n\n    return (\n      <div\n        className={ css('ms-Checkbox', className, { 'is-inFocus': isFocused }) }\n        >\n        <input\n          { ...inputProps }\n          { ...(checked !== undefined && { checked }) }\n          { ...(defaultChecked !== undefined && { defaultChecked }) }\n          disabled={ disabled }\n          ref={ this._resolveRef('_checkBox') }\n          id={ this._id }\n          name={ this._id }\n          className='ms-Checkbox-input'\n          type='checkbox'\n          onChange={ this._onChange }\n          onFocus={ this._onFocus }\n          onBlur={ this._onBlur }\n          aria-checked={ isChecked }\n          />\n        { this.props.children }\n        <label htmlFor={ this._id }\n          className={ css('ms-Checkbox-label', {\n            'is-checked': isChecked,\n            'is-disabled': disabled\n          })\n          }\n          >\n          { label && <span className='ms-Label'>{ label }</span> }\n        </label>\n      </div>\n    );\n  }\n\n  public get checked(): boolean {\n    return this._checkBox ? this._checkBox.checked : false;\n  }\n\n  public focus() {\n    if (this._checkBox) {\n      this._checkBox.focus();\n    }\n  }\n\n  @autobind\n  private _onFocus(ev: React.FocusEvent<HTMLInputElement>): void {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onFocus) {\n      inputProps.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true });\n  }\n\n  @autobind\n  private _onBlur(ev: React.FocusEvent<HTMLInputElement>): void {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onBlur) {\n      inputProps.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false });\n  }\n\n  @autobind\n  private _onChange(ev: React.FormEvent<HTMLInputElement>) {\n    const { onChange } = this.props;\n    const isChecked = (ev.target as HTMLInputElement).checked;\n\n    if (onChange) {\n      onChange(ev, isChecked);\n    }\n\n    if (this.props.checked === undefined) {\n      this.setState({ isChecked: isChecked });\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}