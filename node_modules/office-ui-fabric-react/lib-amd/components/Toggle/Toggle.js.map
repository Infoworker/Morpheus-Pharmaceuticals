{"version":3,"sources":["components/Toggle/Toggle.tsx"],"names":[],"mappings":"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","file":"components/Toggle/Toggle.js","sourcesContent":["import * as React from 'react';\nimport { IToggleProps } from './Toggle.Props';\nimport { css } from '../../utilities/css';\nimport { Label } from '../../Label';\nimport { getId } from '../../utilities/object';\nimport { autobind } from '../../utilities/autobind';\n\nimport './Toggle.scss';\n\nexport interface IToggleState {\n  isChecked: boolean;\n}\n\nexport class Toggle extends React.Component<IToggleProps, IToggleState> {\n\n  public static initialProps = {\n    label: '',\n    onText: 'On',\n    offText: 'Off'\n  };\n\n  private _id: string;\n  private _toggleButton: HTMLButtonElement;\n\n  constructor(props: IToggleProps) {\n    super();\n\n    this.state = {\n      isChecked: !!(props.checked || props.defaultChecked)\n    };\n\n    this._id = getId('Toggle');\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.isChecked;\n  }\n\n  public componentWillReceiveProps(newProps: IToggleProps) {\n    if (newProps.checked !== undefined) {\n      this.setState({\n        isChecked: newProps.checked\n      });\n    }\n  }\n\n  public render() {\n    let { label, onText, offText, className, disabled } = this.props;\n    let { isChecked } = this.state;\n    let stateText = isChecked ? onText : offText;\n\n    return (\n      <div className={\n        css('ms-Toggle', {\n          'is-checked': isChecked,\n          'is-enabled': !disabled,\n          'is-disabled': disabled\n        })\n      }>\n        <div className='ms-Toggle-innerContainer'>\n          <Label className='ms-Toggle-label' htmlFor={ this._id }>{ label }</Label>\n\n          <div className='ms-Toggle-slider'>\n            <button\n              ref={ (c): HTMLButtonElement => this._toggleButton = c }\n              type='button'\n              id={ this._id }\n              name={ this._id }\n              className={ css('ms-Toggle-button', className) }\n              disabled={ disabled }\n              role='checkbox'\n              aria-checked={ isChecked }\n              onClick={ this._onClick }\n            />\n            <div className='ms-Toggle-background'>\n              <div className='ms-Toggle-focus' />\n              <div className='ms-Toggle-thumb' />\n            </div>\n            <Label className='ms-Toggle-stateText'>{ stateText }</Label>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n      if (this._toggleButton) {\n          this._toggleButton.focus();\n      }\n  }\n\n  @autobind\n  private _onClick() {\n    let { checked, onChanged } = this.props;\n    let { isChecked } = this.state;\n\n    // Only update the state if the user hasn't provided it.\n    if (checked === undefined) {\n      this.setState({\n        isChecked: !isChecked\n      });\n    }\n\n    if (onChanged) {\n      onChanged(!isChecked);\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}