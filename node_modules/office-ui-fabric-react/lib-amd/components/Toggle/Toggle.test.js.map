{"version":3,"sources":["components/Toggle/Toggle.test.tsx"],"names":[],"mappings":";;IAOM,wBAAM,CAAU;IAItB,QAAQ,CAAC,QAAQ,EAAE;QAEjB,EAAE,CAAC,iBAAiB,EAAE;YACpB,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,KAAK,EAAC,OAAO,EACb,CACH,CAAC;YACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;YACzE,IAAI,YAAY,GAAG,WAAW,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;YAEjE,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE;YAChD,IAAI,cAAc,CAAC;YACnB,IAAI,QAAQ,GAAG,UAAC,SAAS;gBACvB,cAAc,GAAG,SAAS,CAAC;YAC7B,CAAC,CAAC;YACF,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,KAAK,EAAC,OAAO,EACb,SAAS,EAAG,QAAU,EACtB,CACH,CAAC;YACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;YACzE,IAAI,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;YAE5D,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAE,SAAuC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE;YAC1D,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,KAAK,EAAC,OAAO,EACb,OAAO,EAAG,KAAO,EACjB,CACH,CAAC;YACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;YACzE,IAAI,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;YAE5D,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAEtC,MAAM,CAAE,SAAuC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC","file":"components/Toggle/Toggle.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\n\nimport * as ReactDOM from 'react-dom';\nimport * as ReactTestUtils from 'react-addons-test-utils';\n\nlet { expect } = chai;\n\nimport { Toggle } from './Toggle';\n\ndescribe('Toggle', () => {\n\n  it('renders a label', () => {\n    let component = ReactTestUtils.renderIntoDocument(\n      <Toggle\n        label='Label'\n      />\n    );\n    let renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\n    let labelElement = renderedDOM.querySelector('.ms-Toggle-label');\n\n    expect(labelElement.textContent).to.equal('Label');\n  });\n\n  it('can call the callback on a change of toggle', () => {\n    let isToggledValue;\n    let callback = (isToggled) => {\n      isToggledValue = isToggled;\n    };\n    let component = ReactTestUtils.renderIntoDocument<React.ReactInstance>(\n      <Toggle\n        label='Label'\n        onChanged={ callback }\n      />\n    );\n    let renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\n    let button = renderedDOM.querySelector('.ms-Toggle-button');\n\n    ReactTestUtils.Simulate.click(button);\n    expect(isToggledValue).to.equal(true);\n    expect((component as React.Component<any, any>).state.isChecked).to.equal(true);\n  });\n\n  it(`doesn't update the state if the user provides checked`, () => {\n    let component = ReactTestUtils.renderIntoDocument(\n      <Toggle\n        label='Label'\n        checked={ false }\n      />\n    );\n    let renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\n    let button = renderedDOM.querySelector('.ms-Toggle-button');\n\n    ReactTestUtils.Simulate.click(button);\n\n    expect((component as React.Component<any, any>).state.isChecked).to.equal(false);\n  });\n\n});\n"],"sourceRoot":"../../../src"}