{"version":3,"sources":["components/SearchBox/SearchBox.tsx"],"names":[],"mappings":"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","file":"components/SearchBox/SearchBox.js","sourcesContent":["import * as React from 'react';\nimport { ISearchBoxProps } from './SearchBox.Props';\nimport {\n  BaseComponent,\n  autobind,\n  css,\n  getId,\n  elementContains,\n  getDocument,\n  KeyCodes\n} from '../../Utilities';\nimport './SearchBox.scss';\n\nexport interface ISearchBoxState {\n  value?: string;\n  hasFocus?: boolean;\n  id?: string;\n}\n\nexport class SearchBox extends BaseComponent<ISearchBoxProps, ISearchBoxState> {\n  public static defaultProps: ISearchBoxProps = {\n    labelText: 'Search',\n  };\n\n  private _rootElement: HTMLElement;\n  private _inputElement: HTMLInputElement;\n\n  public constructor(props: ISearchBoxProps) {\n    super(props);\n\n    // Handle deprecated prop\n    if (this.props.onChanged) {\n      this.props.onChange = this.props.onChanged;\n    }\n\n    this.state = {\n      value: props.value || '',\n      hasFocus: false,\n      id: getId('SearchBox')\n    };\n  }\n\n  public componentWillReceiveProps(newProps: ISearchBoxProps) {\n    if (newProps.value !== undefined) {\n      this.setState({\n        value: newProps.value\n      });\n    }\n  }\n\n  public render() {\n    let { labelText, className } = this.props;\n    let { value, hasFocus, id } = this.state;\n\n    return (\n      <div\n        ref={ this._resolveRef('_rootElement') }\n        className={ css('ms-SearchBox', className, {\n          'is-active': hasFocus,\n          'can-clear': value.length > 0\n        }) }\n        { ...{ onFocusCapture: this._onFocusCapture } }\n        >\n        <i className='ms-SearchBox-icon ms-Icon ms-Icon--Search'></i>\n        <input\n          id={ id }\n          className='ms-SearchBox-field'\n          placeholder={ labelText }\n          onChange={ this._onInputChange }\n          onKeyDown={ this._onKeyDown }\n          value={ value }\n          ref={ this._resolveRef('_inputElement') }\n          />\n        <div\n          className='ms-SearchBox-clearButton'\n          onClick={ this._onClearClick }\n          >\n          <i className='ms-Icon ms-Icon--Clear' />\n        </div>\n      </div>\n    );\n  }\n\n  @autobind\n  private _onClearClick(ev?: any) {\n    this.setState({\n      value: ''\n    });\n    this._callOnChange('');\n    ev.stopPropagation();\n    ev.preventDefault();\n\n    this._inputElement.focus();\n  }\n\n  @autobind\n  private _onFocusCapture(ev: React.FocusEvent<HTMLElement>) {\n    this.setState({\n      hasFocus: true\n    });\n\n    this._events.on(getDocument().body, 'focus', this._handleDocumentFocus, true);\n  }\n\n  @autobind\n  private _onKeyDown(ev: React.KeyboardEvent<HTMLInputElement>) {\n    switch (ev.which) {\n\n      case KeyCodes.escape:\n        this._onClearClick(ev);\n        break;\n\n      case KeyCodes.enter:\n        if (this.props.onSearch && this.state.value.length > 0) {\n          this.props.onSearch(this.state.value);\n        }\n        break;\n\n      default:\n        return;\n    }\n\n    // We only get here if the keypress has been handled.\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  @autobind\n  private _onInputChange(ev: React.KeyboardEvent<HTMLInputElement>) {\n    this.setState({\n      value: this._inputElement.value\n    });\n    this._callOnChange(this._inputElement.value);\n  }\n\n  private _handleDocumentFocus(ev: FocusEvent) {\n    if (!elementContains(this._rootElement, ev.target as HTMLElement)) {\n      this._events.off(getDocument().body, 'focus');\n      this.setState({\n        hasFocus: false\n      });\n    }\n  }\n\n  private _callOnChange(newValue: string): void {\n    let { onChange } = this.props;\n\n    if (onChange) {\n      onChange(newValue);\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}