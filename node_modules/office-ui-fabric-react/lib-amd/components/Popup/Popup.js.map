{"version":3,"sources":["components/Popup/Popup.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;IAQA;;OAEG;IACH;QAA2B,yBAA8B;QAAzD;YAA2B,8BAA8B;QA0EzD,CAAC;QA5DQ,kCAAkB,GAAzB;YACE,IAAI,CAAC,uBAAuB,GAAG,iBAAW,EAAE,CAAC,aAA4B,CAAC;QAC5E,CAAC;QAEM,iCAAiB,GAAxB;YAAA,iBAOC;YANC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5D,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,cAAc,GAAG,IAAI,EAA1B,CAA0B,EAAE,IAAI,CAAC,CAAC;YACjF,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,cAAM,OAAA,KAAI,CAAC,cAAc,GAAG,KAAK,EAA3B,CAA2B,EAAE,IAAI,CAAC,CAAC;YACjF,EAAE,CAAC,CAAC,+BAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC7B,CAAC;QACH,CAAC;QAEM,oCAAoB,GAA3B;YAAA,iBAeC;YAdC,EAAE,CAAC,CACD,IAAI,CAAC,KAAK,CAAC,kBAAkB;gBAC7B,IAAI,CAAC,uBAAuB;gBAC5B,IAAI,CAAC,cAAc;gBACnB,IAAI,CAAC,uBAA8B,KAAK,MAAM,CAAC,CAAC,CAAC;gBACjD,4GAA4G;gBAC5G,8GAA8G;gBAC9G,2EAA2E;gBAC3E,UAAU,CAAC;oBACT,EAAE,CAAC,CAAC,KAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBACjC,KAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC;oBACvC,CAAC;gBACH,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,CAAC;QACH,CAAC;QAEM,sBAAM,GAAb;YACE,IAAA,eAAqE,EAA/D,cAAI,EAAE,wBAAS,EAAE,kCAAc,EAAE,oCAAe,CAAgB;YAEtE,MAAM,CAAC,CACL,qBAAC,GAAG,aACF,GAAG,EAAC,MAAM,GACL,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,GAC9C,SAAS,EAAG,SAAW,EACvB,IAAI,EAAG,IAAM,GACb,eAAe,GAAG,cAAgB,GAClC,eAAe,GAAG,eAAiB,IACjC,IAAI,CAAC,KAAK,CAAC,QAAU,CACnB,CACP,CAAC;QACJ,CAAC;QAEO,0BAAU,GAAlB,UAAmB,EAAoC;YACrD,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjB,KAAK,mBAAQ,CAAC,MAAM;oBAElB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;wBACzB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;wBAEvB,EAAE,CAAC,cAAc,EAAE,CAAC;wBACpB,EAAE,CAAC,eAAe,EAAE,CAAC;oBACvB,CAAC;oBAED,KAAK,CAAC;YACV,CAAC;QACH,CAAC;QAvEa,kBAAY,GAAgB;YACxC,kBAAkB,EAAE,IAAI;SACzB,CAAC;QAsEJ,YAAC;IAAD,CA1EA,AA0EC,CA1E0B,6BAAa,GA0EvC;IA1EY,aAAK,QA0EjB,CAAA","file":"components/Popup/Popup.js","sourcesContent":["import * as React from 'react';\nimport { IPopupProps } from './Popup.Props';\nimport { KeyCodes } from '../../utilities/KeyCodes';\nimport { BaseComponent } from '../../common/BaseComponent';\nimport { getNativeProps, divProperties } from '../../Utilities';\nimport { doesElementContainFocus } from '../../utilities/focus';\nimport { getDocument } from '../../utilities/dom';\n\n/**\n * This adds accessibility to Dialog and Panel controls\n */\nexport class Popup extends BaseComponent<IPopupProps, {}> {\n\n  public static defaultProps: IPopupProps = {\n    shouldRestoreFocus: true\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n    root: HTMLElement;\n  };\n\n  private _originalFocusedElement: HTMLElement;\n  private _containsFocus: boolean;\n\n  public componentWillMount() {\n    this._originalFocusedElement = getDocument().activeElement as HTMLElement;\n  }\n\n  public componentDidMount(): void {\n    this._events.on(this.refs.root, 'keydown', this._onKeyDown);\n    this._events.on(this.refs.root, 'focus', () => this._containsFocus = true, true);\n    this._events.on(this.refs.root, 'blur', () => this._containsFocus = false, true);\n    if (doesElementContainFocus(this.refs.root)) {\n      this._containsFocus = true;\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (\n      this.props.shouldRestoreFocus &&\n      this._originalFocusedElement &&\n      this._containsFocus &&\n      this._originalFocusedElement as any !== window) {\n      // This slight delay is required so that we can unwind the stack, let react try to mess with focus, and then\n      // apply the correct focus. Without the setTimeout, we end up focusing the correct thing, and then React wants\n      // to reset the focus back to the thing it thinks should have been focused.\n      setTimeout(() => {\n        if (this._originalFocusedElement) {\n          this._originalFocusedElement.focus();\n        }\n      }, 0);\n    }\n  }\n\n  public render() {\n    let { role, className, ariaLabelledBy, ariaDescribedBy } = this.props;\n\n    return (\n      <div\n        ref='root'\n        { ...getNativeProps(this.props, divProperties) }\n        className={ className }\n        role={ role }\n        aria-labelledby={ ariaLabelledBy }\n        aria-desribedby={ ariaDescribedBy }>\n        { this.props.children }\n      </div>\n    );\n  }\n\n  private _onKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\n    switch (ev.which) {\n      case KeyCodes.escape:\n\n        if (this.props.onDismiss) {\n          this.props.onDismiss();\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n\n        break;\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}