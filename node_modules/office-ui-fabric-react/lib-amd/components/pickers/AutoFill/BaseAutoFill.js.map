{"version":3,"sources":["components/pickers/AutoFill/BaseAutoFill.tsx"],"names":[],"mappings":"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","file":"components/pickers/AutoFill/BaseAutoFill.js","sourcesContent":["import * as React from 'react';\nimport { IBaseAutoFillProps, IBaseAutoFill } from './BaseAutoFill.Props';\nimport { BaseComponent } from '../../../common/BaseComponent';\nimport { getNativeProps, inputProperties } from '../../../utilities/properties';\nimport { autobind } from '../../../utilities/autobind';\nimport { KeyCodes } from '../../../utilities/KeyCodes';\n\nexport interface IBaseAutoFillState {\n  value?: string;\n}\n\nconst SELECTION_FORWARD = 'forward';\nconst SELECTION_BACKWARD = 'backward';\n\nexport class BaseAutoFill extends BaseComponent<IBaseAutoFillProps, IBaseAutoFillState> implements IBaseAutoFill {\n\n  private _inputElement: HTMLInputElement;\n\n  constructor(props: IBaseAutoFillProps) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n  }\n\n  public get cursorLocation(): number {\n    if (this._inputElement) {\n      let inputElement = this._inputElement;\n      if (inputElement.selectionDirection !== SELECTION_FORWARD) {\n        return inputElement.selectionEnd;\n      } else {\n        return inputElement.selectionStart;\n      }\n    } else {\n      return -1;\n    }\n  }\n\n  public get isValueSelected(): boolean {\n    return this.inputElement.selectionStart !== this.inputElement.selectionEnd;\n  }\n\n  public get value(): string {\n    return this.state.value;\n  }\n\n  public get selectionStart(): number {\n    return this._inputElement ? this._inputElement.selectionStart : -1;\n  }\n\n  public get selectionEnd(): number {\n    return this._inputElement ? this._inputElement.selectionEnd : -1;\n  }\n\n  public get inputElement(): HTMLInputElement {\n    return this._inputElement;\n  }\n\n  public componentDidUpdate() {\n    let { value } = this.state;\n    let { suggestedDisplayValue } = this.props;\n    let differenceIndex = 0;\n    if (value && suggestedDisplayValue && this._doesTextStartWith(suggestedDisplayValue, value)) {\n      while (differenceIndex < value.length && value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()) {\n        differenceIndex++;\n      }\n      if (differenceIndex > 0) {\n        this._inputElement.setSelectionRange(differenceIndex, suggestedDisplayValue.length, SELECTION_BACKWARD);\n      }\n    }\n  }\n\n  public render() {\n    let {\n      value\n    } = this.state;\n    let {\n      suggestedDisplayValue\n    } = this.props;\n    let displayValue = value;\n\n    if (this._doesTextStartWith(suggestedDisplayValue, value)) {\n      displayValue = suggestedDisplayValue;\n    }\n\n    const nativeProps = getNativeProps(this.props, inputProperties);\n    return <input { ...nativeProps}\n      ref={ this._resolveRef('_inputElement') }\n      value={ displayValue }\n      autoCapitalize={ 'off' }\n      autoComplete={ 'off' }\n      onChange={ this._onChange }\n      onKeyDown={ this._onKeyDown }\n      />;\n  }\n\n  public focus() {\n    this._inputElement.focus();\n  }\n\n  public clear() {\n    this._updateValue('');\n  }\n\n  @autobind\n  private _onKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\n    switch (ev.which) {\n      case KeyCodes.backspace:\n        this._handleBackspace(ev);\n        break;\n    }\n  }\n\n  private _handleBackspace(ev: React.KeyboardEvent<HTMLElement>) {\n    let { value } = this.state;\n    if (value && value.length > 0) {\n      this._updateValue(value.substring(0, value.length - 1));\n      // Since this effectively deletes a letter from the string we need to preventDefault so that\n      // the backspace doesn't try to delete a letter that's already been deleted. If a letter is deleted\n      // it can trigger the onChange event again which can have unintended consequences.\n      ev.preventDefault();\n    }\n  }\n\n  @autobind\n  private _onChange(ev: React.FormEvent<HTMLElement>) {\n    let value: string = (ev.target as HTMLInputElement).value;\n    this._updateValue(value);\n  }\n\n  private _notifyInputChange(newValue: string) {\n    if (this.props.onInputValueChange) {\n      this.props.onInputValueChange(newValue);\n    }\n  }\n\n  private _updateValue(newValue: string) {\n    this.setState({\n      value: newValue\n    }, () => this._notifyInputChange(newValue));\n  }\n\n  private _doesTextStartWith(text: string, startWith: string) {\n    if (!text || !startWith) {\n      return false;\n    }\n    return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\n  }\n}"],"sourceRoot":"../../../../src"}