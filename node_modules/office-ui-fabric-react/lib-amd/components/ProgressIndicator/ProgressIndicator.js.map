{"version":3,"sources":["components/ProgressIndicator/ProgressIndicator.tsx"],"names":[],"mappings":";;;;;;;IASA,sDAAsD;IACtD,mDAAmD;IACnD,IAAM,cAAc,GAAG,IAAI,CAAC;IAE5B;QAAuC,qCAA0C;QAQ/E,2BAAY,KAA8B;YACxC,kBAAM,KAAK,EAAE;gBACX,OAAO,EAAE,OAAO;aACjB,CAAC,CAAC;QACL,CAAC;QAEM,kCAAM,GAAb;YACE,IAAA,eAA0E,EAApE,gBAAK,EAAE,gBAAK,EAAE,4BAAW,EAAE,oCAAe,EAAE,wBAAS,CAAgB;YAE3E,2BAA2B;YAC3B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,KAAK,GAAG,KAAK,CAAC;YAChB,CAAC;YAED,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,GAAG,GAAG,CAAC,CAAC,CAAC;YAEpE,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAG,SAAG,CAAC,sBAAsB,EAAE,SAAS,CAAG;gBACvD,qBAAC,GAAG,IAAC,SAAS,EAAC,+BAA+B,GAAG,KAAO,CAAM;gBAC9D,qBAAC,GAAG,IAAC,SAAS,EAAC,mCAAmC;oBAChD,qBAAC,GAAG,IAAC,SAAS,EAAC,oCAAoC,EAAO;oBAC1D,qBAAC,GAAG,IAAC,SAAS,EAAG,SAAG,CAAC,kCAAkC,EAAE;wBACrD,kBAAkB,EAAE,eAAe,GAAG,cAAc;qBACrD,CAAE,EACH,KAAK,EAAG,EAAE,KAAK,EAAE,eAAe,GAAG,GAAG,EAAI,EAC1C,IAAI,EAAC,aAAa,GAClB,aAAa,GAAC,GAAG,GACjB,aAAa,GAAC,KAAK,GACnB,aAAa,GAAG,eAAe,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAI,EAClD,CACF;gBACN,qBAAC,GAAG,IAAC,SAAS,EAAC,sCAAsC,GAAG,WAAa,CAAM,CACvE,CACP,CAAC;QACJ,CAAC;QAzCa,8BAAY,GAAG;YAC3B,KAAK,EAAE,EAAE;YACT,WAAW,EAAE,EAAE;YACf,eAAe,EAAE,CAAC;YAClB,KAAK,EAAE,GAAG;SACX,CAAC;QAqCJ,wBAAC;IAAD,CA3CA,AA2CC,CA3CsC,6BAAa,GA2CnD;IA3CY,yBAAiB,oBA2C7B,CAAA","file":"components/ProgressIndicator/ProgressIndicator.js","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\n\nimport { IProgressIndicatorProps } from './ProgressIndicator.Props';\nimport { BaseComponent } from '../../common/BaseComponent';\nimport { css } from '../../utilities/css';\nimport './ProgressIndicator.scss';\n\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nconst ZERO_THRESHOLD = 0.01;\n\nexport class ProgressIndicator extends BaseComponent<IProgressIndicatorProps, {}> {\n  public static defaultProps = {\n    label: '',\n    description: '',\n    percentComplete: 0,\n    width: 180\n  };\n\n  constructor(props: IProgressIndicatorProps) {\n    super(props, {\n      'title': 'label'\n    });\n  }\n\n  public render() {\n    let { title, label, description, percentComplete, className } = this.props;\n\n    // Handle deprecated value.\n    if (title) {\n      label = title;\n    }\n\n    percentComplete = Math.min(100, Math.max(0, percentComplete * 100));\n\n    return (\n      <div className={ css('ms-ProgressIndicator', className) }>\n        <div className='ms-ProgressIndicator-itemName'>{ label }</div>\n        <div className='ms-ProgressIndicator-itemProgress'>\n          <div className='ms-ProgressIndicator-progressTrack'></div>\n          <div className={ css('ms-ProgressIndicator-progressBar', {\n              'smoothTransition': percentComplete > ZERO_THRESHOLD\n            })}\n            style={ { width: percentComplete + '%' } }\n            role='progressbar'\n            aria-valuemin='0'\n            aria-valuemax='100'\n            aria-valuenow={ percentComplete.toFixed().toString() }>\n          </div>\n        </div>\n        <div className='ms-ProgressIndicator-itemDescription'>{ description }</div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}