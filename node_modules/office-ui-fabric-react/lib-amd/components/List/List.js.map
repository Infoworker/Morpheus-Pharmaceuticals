{"version":3,"sources":["components/List/List.tsx"],"names":[],"mappings":"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","file":"components/List/List.js","sourcesContent":["import * as React from 'react';\nimport { IRectangle } from '../../common/IRectangle';\nimport { IListProps, IPage } from './List.Props';\nimport {\n  BaseComponent,\n  assign,\n  css,\n  findIndex,\n  getParent\n} from '../../Utilities';\nimport { findScrollableParent } from '../../utilities/scroll';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\n\nexport interface IListState {\n  pages?: IPage[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback if\n * provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if provided by\n * the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List extends BaseComponent<IListProps, IListState> {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item, index, containsFocus) => (<div>{ (item && item.name) || '' }</div>),\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement,\n    surface: HTMLElement\n  };\n\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number,\n      measureVersion: number\n    }\n  };\n  private _focusedIndex: number;\n  private _scrollElement: HTMLElement;\n  private _scrollingToIndex: number;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n\n  constructor(props: IListProps) {\n    super(props);\n\n    this.state = {\n      pages: []\n    };\n\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(\n      this._onAsyncScroll,\n      MIN_SCROLL_UPDATE_DELAY,\n      {\n        leading: false,\n        maxWait: MAX_SCROLL_UPDATE_DELAY\n      });\n\n    this._onAsyncIdle = this._async.debounce(\n      this._onAsyncIdle,\n      IDLE_DEBOUNCE_DELAY, {\n        leading: false\n      });\n\n    this._onAsyncResize = this._async.debounce(\n      this._onAsyncResize,\n      RESIZE_DELAY,\n      {\n        leading: false\n      });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._scrollingToIndex = -1;\n  }\n\n  public componentDidMount() {\n\n    this._updatePages();\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this.refs.root);\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    this._events.on(this.refs.root, 'focus', this._onFocus, true);\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentWillReceiveProps(newProps: IListProps) {\n    if (newProps.items !== this.props.items ||\n      newProps.renderCount !== this.props.renderCount ||\n      newProps.startIndex !== this.props.startIndex) {\n\n      this._measureVersion++;\n      this._updatePages(newProps);\n    }\n  }\n\n  public shouldComponentUpdate(newProps: IListProps, newState: IListState) {\n    let { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    let { pages: oldPages } = this.state;\n    let { pages: newPages, measureVersion } = newState;\n    let shouldComponentUpdate = false;\n\n    if (\n      this._measureVersion === measureVersion &&\n      newProps.renderedWindowsAhead === renderedWindowsAhead,\n      newProps.renderedWindowsBehind === renderedWindowsBehind,\n      newProps.items === this.props.items &&\n      oldPages.length === newPages.length) {\n      for (let i = 0; i < oldPages.length; i++) {\n        let oldPage = oldPages[i];\n        let newPage = newPages[i];\n\n        if ((oldPage.key !== newPage.key ||\n          oldPage.itemCount !== newPage.itemCount)) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate() {\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, true);\n    this._updatePages();\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  public render() {\n    let { className } = this.props;\n    let { pages } = this.state;\n    let pageElements = [];\n\n    for (let i = 0; i < pages.length; i++) {\n      pageElements.push(this._renderPage(pages[i]));\n    }\n\n    return (\n      <div ref='root' className={ css('ms-List', className) } >\n        <div ref='surface' className='ms-List-surface'>\n          { pageElements }\n        </div>\n      </div>\n    );\n  }\n\n  private _renderPage(page: IPage): any {\n    let { onRenderCell } = this.props;\n    let cells = [];\n    let pageStyle = this._getPageStyle(page);\n\n    for (let i = 0; page.items && i < page.items.length; i++) {\n      let item = page.items[i];\n      let itemKey = (item ? item.key : null);\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = page.startIndex + i;\n      }\n\n      cells.push(\n        <div className='ms-List-cell' key={ itemKey } data-list-index={ i + page.startIndex } data-automationid='ListCell'>\n          { onRenderCell(item, page.startIndex + i) }\n        </div>\n      );\n    }\n\n    return (\n      <div className='ms-List-page' key={ page.key } ref={ page.key } style={ pageStyle }>\n        { cells }\n      </div>\n    );\n  }\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page) {\n    let style;\n    let { getPageStyle } = this.props;\n\n    if (getPageStyle) {\n      style = getPageStyle(page);\n    }\n\n    if (!page.items) {\n      style = style || {};\n      style.height = page.height;\n    }\n\n    return style;\n  }\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev) {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this.refs.surface) {\n      let indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target);\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll() {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll() {\n    this._updateRenderRects();\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect, this._materializedRect)) {\n      this._updatePages();\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle() {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const {\n      _requiredWindowsAhead: requiredWindowsAhead,\n      _requiredWindowsBehind: requiredWindowsBehind\n    } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects();\n      this._updatePages();\n    }\n\n    if (renderedWindowsAhead > windowsAhead || renderedWindowsBehind > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  private _onAsyncResize() {\n    this.forceUpdate();\n  }\n\n  private _updatePages(props?: IListProps) {\n    let { items, startIndex, renderCount } = (props || this.props);\n\n    renderCount = this._getRenderCount(props);\n\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(props);\n    }\n\n    let newListState = this._buildPages(items, startIndex, renderCount);\n    let oldListPages = this.state.pages;\n\n    this.setState(newListState, () => {\n      // If measured version is invalid since we've updated the DOM\n      const heightsChanged = this._updatePageMeasurements(oldListPages, newListState.pages);\n\n      // On first render, we should re-measure so that we don't get a visual glitch.\n      if (heightsChanged) {\n        this._materializedRect = null;\n        if (!this._hasCompletedFirstRender) {\n          this._hasCompletedFirstRender = true;\n          this._updatePages();\n        } else {\n          this._onAsyncScroll();\n        }\n      } else {\n        // Enqueue an idle bump.\n        this._onAsyncIdle();\n      }\n    });\n  }\n\n  private _updatePageMeasurements(oldPages: IPage[], newPages: IPage[]) {\n    let renderedIndexes = {};\n    let heightChanged = false;\n    let renderCount = this._getRenderCount();\n\n    for (let i = 0; i < oldPages.length; i++) {\n      let page = oldPages[i];\n\n      if (page.items) {\n        renderedIndexes[page.startIndex] = page;\n      }\n    }\n\n    for (let i = 0; i < newPages.length; i++) {\n      let page = newPages[i];\n\n      if (page.items) {\n        // Only evaluate page height if the page contains less items than total.\n        if (page.items.length < renderCount) {\n          heightChanged = this._measurePage(page) || heightChanged;\n        }\n\n        if (!renderedIndexes[page.startIndex]) {\n          this._onPageAdded(page);\n        } else {\n          delete renderedIndexes[page.startIndex];\n        }\n      }\n    }\n\n    for (let index in renderedIndexes) {\n      if (renderedIndexes.hasOwnProperty(index)) {\n        this._onPageRemoved(renderedIndexes[index]);\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage): boolean {\n    let hasChangedHeight = false;\n    let pageElement = this.refs[page.key] as HTMLElement;\n    let cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (pageElement && (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)) {\n      let newClientRect = _measurePageRect(pageElement);\n\n      hasChangedHeight = page.height !== newClientRect.height;\n\n      // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n      page.height = newClientRect.height;\n\n      this._cachedPageHeights[page.startIndex] = {\n        height: newClientRect.height,\n        measureVersion: this._measureVersion\n      };\n\n      this._estimatedPageHeight = Math.round(\n        ((this._estimatedPageHeight * this._totalEstimates) + newClientRect.height) /\n        (this._totalEstimates + 1));\n\n      this._totalEstimates++;\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage) {\n    let { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page=>page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage) {\n    let { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page=>page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(items: any[], startIndex: number, renderCount: number): IListState {\n    let materializedRect = assign({}, EMPTY_RECT) as IRectangle;\n    let itemsPerPage = 1;\n    let pages = [];\n    let pageTop = 0;\n    let currentSpacer = null;\n    let focusedIndex = this._focusedIndex;\n    let endIndex = startIndex + renderCount;\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    let isFirstRender = this._estimatedPageHeight === 0 && !this.props.getPageHeight;\n\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      itemsPerPage = this._getItemCountForPage(itemIndex, this._allowedRect);\n\n      let pageHeight = this._getPageHeight(itemIndex, itemsPerPage, this._surfaceRect);\n      let pageBottom = pageTop + pageHeight - 1;\n\n      let isPageRendered = findIndex(this.state.pages, (page) => page.items && page.startIndex === itemIndex) > -1;\n      let isPageInAllowedRange = pageBottom >= this._allowedRect.top && pageTop <= this._allowedRect.bottom;\n      let isPageInRequiredRange = pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom;\n      let isPageVisible = !isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered));\n      let isPageFocused = focusedIndex >= itemIndex && focusedIndex < (itemIndex + itemsPerPage);\n      let isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' + isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page.\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        let itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        let newPage = this._createPage(null, items.slice(itemIndex, itemIndex + itemsInPage), itemIndex);\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: this._allowedRect.left,\n            right: this._allowedRect.right,\n            width: this._allowedRect.width\n          });\n        }\n\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage('spacer-' + itemIndex, null, itemIndex, 0);\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += (pageBottom - pageTop + 1);\n\n      if (isFirstRender) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = 'spacer-end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      pages: pages,\n      measureVersion: this._measureVersion\n    };\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, itemsPerPage: number, visibleRect: IRectangle): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect);\n    } else {\n      let cachedHeight = (this._cachedPageHeights[itemIndex]);\n\n      return cachedHeight ? cachedHeight.height : (this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT);\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    let itemsPerPage = this.props.getItemCountForPage ? this.props.getItemCountForPage(itemIndex, visibileRect) : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(pageKey: string, items: any[], startIndex?: number, count?: number, style?: any): IPage {\n    pageKey = pageKey || ('page-' + startIndex);\n\n    // Fill undefined cells because array.map will ignore undefined cells.\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        items[i] = items[i] || null;\n      }\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex === undefined ? -1 : startIndex,\n      itemCount: (count === undefined) ? (items ? items.length : 0) : count,\n      items: items,\n      style: style || {},\n      top: 0,\n      height: 0\n    };\n  }\n\n  private _getRenderCount(props?: IListProps): number {\n    let { items, startIndex, renderCount } = props || this.props;\n\n    return (renderCount === undefined ? (items ? items.length - startIndex : 0) : renderCount);\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props?: IListProps, forceUpdate?: boolean) {\n    const { renderedWindowsAhead, renderedWindowsBehind } = (props || this.props);\n    const { pages } = this.state;\n    const renderCount = this._getRenderCount(props);\n    let surfaceRect = this._surfaceRect;\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    if (\n      forceUpdate ||\n      !pages ||\n      !this._surfaceRect ||\n      (pages.length > 0 && pages[0].items && pages[0].items.length < renderCount)) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this.refs.surface);\n    }\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + window.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: window.innerHeight\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind, renderedWindowsAhead);\n  }\n}\n\nfunction _expandRect(rect, pagesBefore, pagesAfter): IRectangle {\n  const top = rect.top - (pagesBefore * rect.height);\n  const height = rect.height + ((pagesBefore + pagesAfter) * rect.height);\n\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom <= outerRect.bottom &&\n    innerRect.right <= outerRect.right);\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = (newRect.top < targetRect.top || targetRect.top === -1) ? newRect.top : targetRect.top;\n  targetRect.left = (newRect.left < targetRect.left || targetRect.left === -1) ? newRect.left : targetRect.left;\n  targetRect.bottom = (newRect.bottom > targetRect.bottom || targetRect.bottom === -1) ? newRect.bottom : targetRect.bottom;\n  targetRect.right = (newRect.right > targetRect.right || targetRect.right === -1) ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right - targetRect.left + 1;\n  targetRect.height = targetRect.bottom - targetRect.top + 1;\n\n  return targetRect;\n}"],"sourceRoot":"../../../src"}