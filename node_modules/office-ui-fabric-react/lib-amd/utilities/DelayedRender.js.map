{"version":3,"sources":["utilities/DelayedRender.tsx"],"names":[],"mappings":";;;;;;;IAiBA;;;;;;;;;;;;OAYG;IACH;QAAmC,iCAAyD;QAO1F,uBAAY,KAA0B;YACpC,kBAAM,KAAK,CAAC,CAAC;YACb,IAAI,CAAC,KAAK,GAAG;gBACX,UAAU,EAAE,KAAK;aAClB,CAAC;QACJ,CAAC;QAEM,yCAAiB,GAAxB;YAAA,iBAOC;YANO,4BAAK,CAAgB;YAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBAC3B,KAAI,CAAC,QAAQ,CAAC;oBACZ,UAAU,EAAE,IAAI;iBACjB,CAAC,CAAC;YACL,CAAC,EAAE,KAAK,CAAC,CAAC;QACZ,CAAC;QAEM,4CAAoB,GAA3B;YACE,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChC,CAAC;QAEM,8BAAM,GAAb;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;QACjF,CAAC;QA5Ba,0BAAY,GAAG;YAC3B,KAAK,EAAE,CAAC;SACT,CAAC;QA2BJ,oBAAC;IAAD,CA9BA,AA8BC,CA9BkC,KAAK,CAAC,SAAS,GA8BjD;IA9BY,qBAAa,gBA8BzB,CAAA","file":"utilities/DelayedRender.js","sourcesContent":["import * as React from 'react';\n\nexport interface IDelayedRenderProps extends React.Props<any> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   * @default 0\n   */\n  delay?: number;\n}\n\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @example\n * <DelayedRender delay={ 3000 }>\n *  <div className='foo-List-loadingSpinner'>\n *    <p>I am loading</p>\n *    <Spinner />\n *  </div>\n * </DelayedRender>\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0\n  };\n\n  private _timeoutId;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: false\n    };\n  }\n\n  public componentDidMount() {\n    let { delay } = this.props;\n    this._timeoutId = setTimeout(() => {\n      this.setState({\n        isRendered: true\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount() {\n    clearTimeout(this._timeoutId);\n  }\n\n  public render() {\n    return this.state.isRendered ? React.Children.only(this.props.children) : null;\n  }\n}\n"],"sourceRoot":"../../src"}