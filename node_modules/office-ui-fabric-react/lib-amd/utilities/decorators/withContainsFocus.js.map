{"version":3,"sources":["utilities/decorators/withContainsFocus.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;IAGA,2BAA4E,iBAA8E;QAExJ,MAAM,CAAC;YAAyC,8CAAkE;YAQhH;gBACE,iBAAO,CAAC;gBAER,IAAI,CAAC,KAAK,GAAG;oBACX,aAAa,EAAE,KAAK;iBACrB,CAAC;gBAEF,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;gBACjF,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjF,CAAC;YAEM,yDAAoB,GAA3B;gBACE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACxB,CAAC;YAEM,2CAAM,GAAb;gBACQ,4CAAa,CAAgB;gBAEnC,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,GAAG,EAAC,MAAM,EAAC,OAAO,EAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAG,EAAC,MAAM,EAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAG;oBAC7F,oBAAC,iBAAiB,YAAC,GAAG,EAAG,IAAI,CAAC,2BAA6B,EAAC,aAAa,EAAG,aAAe,GAAK,IAAI,CAAC,KAAK,EAAI;iBAC1G,CACP,CAAC;YACJ,CAAC;YAEM,gDAAW,GAAlB;gBACE,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,CAAC;YAChD,CAAC;YAEO,iDAAY,GAApB,UAAqB,EAAE;gBACrB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAClC,CAAC;YAEO,gDAAW,GAAnB,UAAoB,EAAE;gBACpB,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC/B,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAClC,CAAC;YAEO,sDAAiB,GAAzB;gBACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBACxD,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;gBAC3D,CAAC;YACH,CAAC;YACH,iCAAC;QAAD,CApDO,AAoDN,CApD+C,6BAAa,EAoD5D,CAAC;IACJ,CAAC;IAvDe,yBAAiB,oBAuDhC,CAAA","file":"utilities/decorators/withContainsFocus.js","sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\n\nexport function withContainsFocus<P extends { containsFocus?: boolean }, S>(ComposedComponent: (new (props: P, ...args: any[]) => (React.Component<P, S>))): any {\n\n  return class WithContainsFocusComponent extends BaseDecorator<P & { containsFocus? }, { containsFocus?: boolean }> {\n    public refs: {\n      [key: string]: React.ReactInstance,\n    };\n\n    private _newContainsFocus: boolean;\n    private _delayedSetContainsFocus: () => void;\n\n    constructor() {\n      super();\n\n      this.state = {\n        containsFocus: false\n      };\n\n      this._delayedSetContainsFocus = this._async.debounce(this._setContainsFocus, 20);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n    }\n\n    public componentWillUnmount() {\n      this._async.dispose();\n    }\n\n    public render() {\n      let { containsFocus } = this.state;\n\n      return (\n        <div ref='root' onFocus={ this._handleFocus.bind(this) } onBlur={ this._handleBlur.bind(this) }>\n          <ComposedComponent ref={ this._updateComposedComponentRef } containsFocus={ containsFocus } {...this.props} />\n        </div>\n      );\n    }\n\n    public forceUpdate() {\n      this._composedComponentInstance.forceUpdate();\n    }\n\n    private _handleFocus(ev) {\n      this._newContainsFocus = true;\n      this._delayedSetContainsFocus();\n    }\n\n    private _handleBlur(ev) {\n      this._newContainsFocus = false;\n      this._delayedSetContainsFocus();\n    }\n\n    private _setContainsFocus() {\n      if (this.state.containsFocus !== this._newContainsFocus) {\n        this.setState({ containsFocus: this._newContainsFocus });\n      }\n    }\n  };\n}\n"],"sourceRoot":"../../../src"}