{"version":3,"sources":["utilities/decorators/BaseDecorator.ts"],"names":[],"mappings":";;;;;;;IAIA;QAAyC,iCAAmB;QAI1D;YACE,iBAAO,CAAC;YACR,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjF,CAAC;QAED;;;;;WAKG;QACO,mDAA2B,GAArC,UAAsC,yBAAgD;YACpF,IAAI,CAAC,0BAA0B,GAAG,yBAAyB,CAAC;YAC5D,EAAE,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,QAAQ,GAAG,oBAAY,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;YAChE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzB,sBAAc,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtC,CAAC;QACH,CAAC;QACH,oBAAC;IAAD,CAvBA,AAuBC,CAvBwC,6BAAa,GAuBrD;IAvBY,qBAAa,gBAuBzB,CAAA","file":"utilities/decorators/BaseDecorator.js","sourcesContent":["import * as React from 'react';\nimport { hoistMethods, unhoistMethods } from '../hoist';\nimport { BaseComponent } from '../../common/BaseComponent';\n\nexport class BaseDecorator<P, S> extends BaseComponent<P, S> {\n  protected _composedComponentInstance: React.Component<P, S>;\n  private _hoisted: string[];\n\n  constructor() {\n    super();\n    this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n  }\n\n  /**\n   * Updates the ref to the component composed by the decorator, which will also take care of hoisting\n   * (and unhoisting as appropriate) methods from said component.\n   *\n   * Pass this method as the argument to the 'ref' property of the composed component.\n   */\n  protected _updateComposedComponentRef(composedComponentInstance: React.Component<P, S>) {\n    this._composedComponentInstance = composedComponentInstance;\n    if (composedComponentInstance) {\n      this._hoisted = hoistMethods(this, composedComponentInstance);\n    } else if (this._hoisted) {\n      unhoistMethods(this, this._hoisted);\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}