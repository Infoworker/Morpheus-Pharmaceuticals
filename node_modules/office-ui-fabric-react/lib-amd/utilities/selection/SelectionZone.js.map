{"version":3,"sources":["utilities/selection/SelectionZone.tsx"],"names":[],"mappings":"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","file":"utilities/selection/SelectionZone.js","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  KeyCodes,\n  autobind,\n  getParent\n } from '../../Utilities';\nimport { SelectionLayout } from './SelectionLayout';\nimport {\n  ISelection,\n  ISelectionLayout,\n  SelectionDirection,\n  SelectionMode\n} from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\n\nexport interface ISelectionZoneProps extends React.Props<SelectionZone> {\n  selection: ISelection;\n  layout?: ISelectionLayout;\n  selectionMode?: SelectionMode;\n  isSelectedOnFocus?: boolean;\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n}\n\nexport class SelectionZone extends BaseComponent<ISelectionZoneProps, {}> {\n  public static defaultProps = {\n    layout: new SelectionLayout(SelectionDirection.vertical),\n    isMultiSelectEnabled: true,\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement\n  };\n\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _shouldIgnoreFocus: boolean;\n\n  public componentDidMount() {\n    // Track the latest modifier keys globally.\n    this._events.on(window, 'keydown keyup', this._updateModifiers);\n  }\n\n  public render() {\n    return (\n      <div\n        className='ms-SelectionZone'\n        ref='root'\n        onKeyDown={ this._onKeyDown }\n        onMouseDown={ this._onMouseDown }\n        onClick={ this._onClick }\n        onDoubleClick={ this._onDoubleClick }\n        { ...{\n          onMouseDownCapture: this.ignoreNextFocus,\n          onFocusCapture: this._onFocus\n        } }\n        >\n        {this.props.children }\n      </div>\n    );\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE <= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  @autobind\n  public ignoreNextFocus() {\n    this._shouldIgnoreFocus = true;\n  }\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  @autobind\n  private _onFocus(ev: React.FocusEvent<HTMLElement>) {\n    let target = ev.target as HTMLElement;\n    let { selection, selectionMode } = this.props;\n    let isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    if (this._shouldIgnoreFocus || selectionMode === SelectionMode.none) {\n      this._shouldIgnoreFocus = false;\n      return;\n    }\n\n    let isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n    let itemRoot = this._findItemRoot(target);\n\n    if (!isToggle && itemRoot) {\n      let index = this._getItemIndex(itemRoot);\n\n      if (isToggleModifierPressed) {\n        // set anchor only.\n        selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n      } else {\n        this._onItemSurfaceClick(ev, index);\n      }\n    }\n  }\n\n  @autobind\n  private _onMouseDown(ev: React.MouseEvent<HTMLElement>) {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    let itemRoot = this._findItemRoot(target);\n\n    while (target !== this.refs.root) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\n          break;\n        } else if (target === itemRoot) {\n          break;\n        }\n      }\n\n      target = getParent(target);\n    }\n  }\n\n  @autobind\n  private _onClick(ev: React.MouseEvent<HTMLElement>) {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    let itemRoot = this._findItemRoot(target);\n\n    while (target !== this.refs.root) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        this._onToggleAllClick(ev);\n        break;\n      } else if (itemRoot) {\n        let index = this._getItemIndex(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (this._isShiftPressed) {\n            this._onItemSurfaceClick(ev, index);\n          } else {\n            this._onToggleClick(ev, index);\n          }\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          this._onInvokeClick(ev, index);\n          break;\n        } else if (target === itemRoot) {\n          this._onItemSurfaceClick(ev, index);\n          break;\n        }\n      }\n\n      target = getParent(target);\n    }\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or input elements),\n   * we should execute the invoke handler.\n   */\n  @autobind\n  private _onDoubleClick(ev: React.MouseEvent<HTMLElement>) {\n    let target = ev.target as HTMLElement;\n    let { selectionMode, onItemInvoked } = this.props;\n    let itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && selectionMode !== SelectionMode.none && !this._isInputElement(target)) {\n      let index = this._getItemIndex(itemRoot);\n\n      while (target !== this.refs.root) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target);\n      }\n\n      target = getParent(target);\n    }\n  }\n\n  @autobind\n  private _onKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    let { selection, selectionMode } = this.props;\n    let isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    let isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      return;\n    }\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      selection.setAllSelected(true);\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed, clear selection (if any are selected.)\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n      selection.setAllSelected(false);\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    let itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      let index = this._getItemIndex(itemRoot);\n\n      while (target !== this.refs.root) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (target === itemRoot) {\n          if (ev.which === KeyCodes.enter) {\n            this._onInvokeClick(ev, index);\n          } else if (ev.which === KeyCodes.space) {\n            this._onToggleClick(ev, index);\n          }\n          break;\n        }\n\n        target = getParent(target);\n      }\n    }\n  }\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>) {\n    let { selection, selectionMode } = this.props;\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number) {\n    let { selection, selectionMode } = this.props;\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      let isSelected = selection.isIndexSelected(index);\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      selection.setChangeEvents(true);\n    } else {\n      return;\n    }\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number) {\n    let { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number) {\n    let { selection, selectionMode } = this.props;\n    let isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  }\n\n  private _onInvokeMouseDown(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number) {\n    let { selection } = this.props;\n\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  }\n\n  private _clearAndSelectIndex(index: number) {\n    let { selection } = this.props;\n    let isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected) {\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>) {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement {\n    let { selection } = this.props;\n\n    while (target !== this.refs.root) {\n      let indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      let index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length ) {\n        break;\n      }\n\n      target = getParent(target);\n    }\n\n    if (target === this.refs.root) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string) {\n    let isToggle = false;\n\n    while (!isToggle && element !== this.refs.root) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element);\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement) {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  }\n\n}\n"],"sourceRoot":"../../../src"}