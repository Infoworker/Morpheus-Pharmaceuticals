{"version":3,"sources":["utilities/selection/Selection.test.ts"],"names":[],"mappings":"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","file":"utilities/selection/Selection.test.js","sourcesContent":["let { expect } = chai;\n\nimport { Selection, IObjectWithKey } from './index';\n\nlet setA = [ { key: 'a' }, { key: 'b' }, { key: 'c' } ];\nlet setB = [ { key: 'a' }, { key: 'd' }, { key: 'b' } ];\n\ndescribe('Selection', () => {\n\n  it('fires change events only when selection changes occur', () => {\n    let changeCount = 0;\n    let selection = new Selection({ onSelectionChanged: () => changeCount++ });\n\n    selection.setItems(setA, false);\n    expect(changeCount).equals(0, 'after setting set a');\n\n    selection.setKeySelected('a', true, true);\n    selection.setKeySelected('a', true, true);\n    selection.setIndexSelected(0, true, true);\n    expect(changeCount).equals(1, 'after selecting item a');\n\n    // Switch to set b, which also contains item a, in the same position. No change event should occur.\n    selection.setItems(setB, false);\n    expect(changeCount).equals(1, 'after switching to set b');\n\n    // Select b\n    selection.setKeySelected('b', true, true);\n    expect(changeCount).equals(2, 'after selecting b');\n\n    // Change back to set a, which has item b in a different index.\n    selection.setItems(setA, false);\n    expect(changeCount).equals(3, 'after changing back to set a');\n\n    // Change to set b, but clear it.\n    selection.setItems(setB, true);\n    expect(changeCount).equals(4, 'after switching to set b and clearing');\n\n    // Select an item in set b that doesn't exist in set a, then switch to set a.\n    selection.setKeySelected('d', true, true);\n    selection.setItems(setA, false);\n    expect(changeCount).equals(6, 'after selecting c and switching to set a');\n\n    // Select an item, clear, clear again.\n    selection.setAllSelected(true);\n    selection.setAllSelected(true);\n    selection.setAllSelected(false);\n    selection.setAllSelected(false);\n    expect(changeCount).equals(8, 'after selecting all 2 times and clearing 2 times');\n\n    selection.setIndexSelected(0, true, true);\n    selection.selectToIndex(2, true);\n    expect(changeCount).equals(10, 'after range selecting from 0 to 2');\n  });\n\n  it('returns false on isAllSelected when no items are selectable', () => {\n    let changeEvents = 0;\n    let selection = new Selection({\n      canSelectItem: (item: IObjectWithKey) => false,\n      onSelectionChanged: () => changeEvents++\n    });\n\n    selection.setItems(setA);\n\n    expect(selection.isAllSelected()).to.equal(false, 'isAllSelected was not false after initialization');\n\n    selection.setAllSelected(true);\n\n    expect(selection.isAllSelected()).to.equal(false, 'isAllSelected was not false after trying to select all the unselectables');\n\n    expect(changeEvents).to.equal(0, 'changeEvents were not 0');\n  });\n\n  it ('resets unselectable count on setting new items', () => {\n    let canSelect = false;\n    let selection = new Selection({\n      canSelectItem: (item: IObjectWithKey) => canSelect\n    });\n\n    selection.setItems(setA);\n    expect(selection.isAllSelected()).to.equal(false, 'isAllSelected was not false after initialization');\n    selection.setAllSelected(true);\n    expect(selection.isAllSelected()).to.equal(false, 'isAllSelected was not false after trying to select all the unselectables');\n\n    canSelect = true;\n    selection.setItems(setA);\n    selection.setAllSelected(true);\n    expect(selection.isAllSelected()).to.equal(true, 'isAllSelected was not false after trying to select all the unselectables');\n  });\n\n});"],"sourceRoot":"../../../src"}