{"version":3,"sources":["utilities/autobind.ts"],"names":[],"mappings":";;IAAA;;;;;;;;;;;;OAYG;IACH,kBAA6C,MAAW,EAAE,GAAW,EAAE,UAAsC;QAC3G,IAAI,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC;QAE1B,MAAM,CAAC;YACL,YAAY,EAAE,IAAI;YAElB,GAAG;gBACD,EAAE,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC1B,MAAM,CAAC,EAAE,CAAC;gBACZ,CAAC;gBACD,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvB,CAAC;YAED,GAAG,YAAC,QAAQ;gBACV,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;oBAC/B,YAAY,EAAE,IAAI;oBAClB,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE,IAAI;oBAChB,KAAK,EAAE,QAAQ;iBAChB,CAAC,CAAC;YACL,CAAC;SACF,CAAC;IACJ,CAAC;IAtBe,gBAAQ,WAsBvB,CAAA","file":"utilities/autobind.js","sourcesContent":["/**\n * Autobind is a utility for binding methods in a class. This simplifies tagging methods as being \"bound\" to the this pointer\n * so that they can be used in scenarios that simply require a function callback.\n *\n * @example\n * import { autobind } from '../utilities/autobind';\n *\n * public class Foo {\n *   @autobind\n *   method() {\n *   }\n * }\n */\nexport function autobind<T extends Function>(target: any, key: string, descriptor: TypedPropertyDescriptor<T>) {\n  let fn = descriptor.value;\n\n  return {\n    configurable: true,\n\n    get() {\n      if (this === fn.prototype) {\n        return fn;\n      }\n      return fn.bind(this);\n    },\n\n    set(newValue) {\n      Object.defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        enumerable: true,\n        value: newValue\n      });\n    }\n  };\n}\n"],"sourceRoot":"../../src"}