{"version":3,"sources":["demo/pages/PickersPage/examples/TagPicker.Basic.Example.tsx"],"names":[],"mappings":";;;;;;;IAKA,IAAI,SAAS,GAAG;QACd,OAAO;QACP,MAAM;QACN,OAAO;QACP,MAAM;QACN,OAAO;QACP,SAAS;QACT,OAAO;QACP,QAAQ;QACR,MAAM;QACN,QAAQ;QACR,KAAK;QACL,MAAM;QACN,QAAQ;QACR,OAAO;QACP,QAAQ;KACT,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAA3B,CAA2B,CAAC,CAAC;IAE3C;QAA2C,yCAAuB;QAAlE;YAA2C,8BAAuB;QA2BlE,CAAC;QAzBQ,sCAAM,GAAb;YACE,MAAM,CAAC,CACL,oBAAC,qBAAS,GACR,oBAAoB,EAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAG,EACzD,eAAe,EAAG,UAAC,IAAS,IAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAG,EACxD,sBAAsB,EACpB;gBACE,qBAAqB,EAAE,gBAAgB;gBACvC,kBAAkB,EAAE,qBAAqB;aAE5C,EACC,CACL,CAAC;QACJ,CAAC;QAEO,gDAAgB,GAAxB,UAAyB,UAAkB,EAAE,OAAwC;YAArF,iBAEC;YADC,MAAM,CAAC,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,EAA9D,CAA8D,CAAC,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,KAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,OAAO,CAAC,EAA1C,CAA0C,CAAC,GAAG,EAAE,CAAC;QAC9K,CAAC;QAEO,qDAAqB,GAA7B,UAA8B,GAAkC,EAAE,OAAwC;YACxG,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxD,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,EAA1B,CAA0B,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QAC7E,CAAC;QACH,4BAAC;IAAD,CA3BA,AA2BC,CA3B0C,KAAK,CAAC,SAAS,GA2BzD;IA3BY,6BAAqB,wBA2BjC,CAAA","file":"demo/pages/PickersPage/examples/TagPicker.Basic.Example.js","sourcesContent":["import * as React from 'react';\nimport {\n  TagPicker\n} from '../../../../components/pickers/TagPicker/TagPicker';\n\nlet _testTags = [\n  'black',\n  'blue',\n  'brown',\n  'cyan',\n  'green',\n  'magenta',\n  'mauve',\n  'orange',\n  'pink',\n  'purple',\n  'red',\n  'rose',\n  'violet',\n  'white',\n  'yellow'\n].map(item => ({ key: item, name: item }));\n\nexport class TagPickerBasicExample extends React.Component<{}, {}> {\n\n  public render() {\n    return (\n      <TagPicker\n        onResolveSuggestions={ this._onFilterChanged.bind(this) }\n        getTextFromItem= {(item: any) => { return item.name; } }\n        pickerSuggestionsProps={\n          {\n            suggestionsHeaderText: 'Suggested Tags',\n            noResultsFoundText: 'No Color Tags Found'\n          }\n        }\n        />\n    );\n  }\n\n  private _onFilterChanged(filterText: string, tagList: { key: string, name: string }[]) {\n    return filterText ? _testTags.filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0).filter(item => !this._listContainsDocument(item, tagList)) : [];\n  }\n\n  private _listContainsDocument(tag: { key: string, name: string }, tagList: { key: string, name: string }[]) {\n    if (!tagList || !tagList.length || tagList.length === 0) {\n      return false;\n    }\n    return tagList.filter(compareTag => compareTag.key === tag.key).length > 0;\n  }\n}\n"],"sourceRoot":"../../../../../src"}