{"version":3,"sources":["demo/pages/ThemePage/ThemePage.tsx"],"names":[],"mappings":"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","file":"demo/pages/ThemePage/ThemePage.js","sourcesContent":["import * as React from 'react';\nimport { loadTheme, ITheme } from '@microsoft/load-themed-styles';\nlet Highlight = require('react-highlight');\nimport { defaultTheme } from './defaultTheme';\nimport {\n  Callout,\n  DetailsList,\n  DetailsListLayoutMode as LayoutMode\n} from '../../../index';\nimport { SelectionMode } from '../../../utilities/selection/interfaces';\nimport { ColorPicker } from '../../../components/ColorPicker/index';\nimport './ThemePage.scss';\n\nconst ThemeCodeExample = require('./ThemeCodeExample.txt');\n\nexport class ThemePage extends React.Component<any, any> {\n\n  public refs: {\n    [ key: string ]: React.ReactInstance;\n    list: DetailsList;\n  };\n\n  constructor() {\n    super();\n\n    this._onPickerDismiss = this._onPickerDismiss.bind(this);\n\n    this.state = {\n      colors: Object.keys(defaultTheme).map(variableName => ({\n        key: variableName,\n        name: variableName,\n        value: defaultTheme[variableName],\n        description: '',\n        colorPickerProps: null\n      }))\n    };\n  }\n\n  public render() {\n    let { colors, colorPickerProps } = this.state;\n\n    return (\n      <div className='Themes'>\n        <h1 className='ms-font-xxl'>Themes</h1>\n        <p>The entire color pallete of the controls are themeable. We provide a set of sensible defaults, but you can override all colors individually.</p>\n        <p>To override the themes, you need to call <span className='code'>loadTheme()</span> with the appropriate set of overrides:</p>\n\n        <Highlight className='typescript'>\n          { ThemeCodeExample }\n        </Highlight>\n\n        <h1 className='ms-font-xl'>Define a theme</h1>\n        <div>\n          <DetailsList\n            ref='list'\n            items={ colors }\n            selectionMode={ SelectionMode.none }\n            layoutMode={ LayoutMode.fixedColumns }\n            columns={[\n              {\n                key: 'name',\n                name: 'Name',\n                fieldName: 'name',\n                minWidth: 150,\n                maxWidth: 150\n              },\n              {\n                key: 'color',\n                name: 'Color',\n                fieldName: 'value',\n                minWidth: 200,\n                onRender: (item, index) => (\n                  <div className='ThemePage-colorSwatch' data-is-focusable='true' onClick={ this._onSwatchClicked.bind(this, item, index) }>\n                    <span className='ThemePage-swatch' style={ { backgroundColor: item.value } } />\n                    <span className='ThemePage-colorValue'>{ item.value }</span>\n                  </div>\n                )\n              },\n              {\n                key: 'desc',\n                name: 'Description',\n                fieldName: 'description',\n                minWidth: 90\n              }\n            ]}\n          />\n\n          { colorPickerProps && (\n          <Callout\n            isBeakVisible={ false }\n            gapSpace={ 10 }\n            targetElement={ colorPickerProps.targetElement }\n            onDismiss={ this._onPickerDismiss }>\n\n            <ColorPicker\n              color={ colorPickerProps.value }\n              onColorChanged={ this._onColorChanged.bind(this, colorPickerProps.index) }\n            />\n\n          </Callout>\n          ) }\n\n        </div>\n\n      </div>\n    );\n  }\n\n  private _onSwatchClicked(item: any, index: number, ev: React.MouseEvent<HTMLElement>) {\n    this.setState({\n      colorPickerProps: {\n        targetElement: (ev.currentTarget as HTMLElement).children[0],\n        value: item.value,\n        index: index\n      }\n    });\n  }\n\n  private _onColorChanged(index: number, newColor: string) {\n    let { colors } = this.state;\n    let color = colors[index];\n    let theme: ITheme = {};\n\n    color.value = newColor;\n\n    for (let i = 0; i < colors.length; i++) {\n      let themeColor = colors[i];\n\n      theme[themeColor.key] = themeColor.value;\n    }\n\n    loadTheme(theme);\n\n    // The theme has changed values, but color state is the same. Force an update on the list.\n    this.refs.list.forceUpdate();\n  }\n\n  private _onPickerDismiss() {\n    this.setState({\n      colorPickerProps: null\n    });\n  }\n\n}\n"],"sourceRoot":"../../../../src"}