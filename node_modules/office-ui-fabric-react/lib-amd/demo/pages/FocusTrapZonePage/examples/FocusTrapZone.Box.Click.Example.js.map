{"version":3,"sources":["demo/pages/FocusTrapZonePage/examples/FocusTrapZone.Box.Click.Example.tsx"],"names":[],"mappings":";;;;;;;IAkBA;QAA+C,qCAAgF;QAK7H,2BAAY,KAAK;YACf,kBAAM,KAAK,CAAC,CAAC;YAEb,IAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,KAAK;aACjB,CAAC;QACJ,CAAC;QAEM,kCAAM,GAAb;YAAA,iBAwBC;YAvBO,oCAAS,CAAgB;YAE/B,MAAM,CAAC,CACL,qBAAC,GAAG;gBACF,oBAAC,cAAM,GAAC,WAAW,EAAC,kCAAkC,EAAC,OAAO,EAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAG,GAAC,iBAAe,CAAS;gBAEhI,CAAC;oBACA,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACd,MAAM,CAAC,CACL,oBAAC,qBAAa,GAAC,2BAA2B,EAAG,IAAM,EAAC,oBAAoB,EAAG,KAAO,GAC9E,KAAI,CAAC,iBAAiB,EAAI,CACd,CACf,CAAC;oBACN,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,CACL,qBAAC,GAAG,SACA,KAAI,CAAC,iBAAiB,EAAI,CACxB,CACP,CAAC;oBACJ,CAAC;gBACH,CAAC,CAAC,EAAG,CACD,CACP,CAAC;QACJ,CAAC;QAEO,6CAAiB,GAAzB;YAAA,iBAuBC;YAtBO,oCAAS,CAAgB;YAE/B,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAC,4BAA4B;gBACzC,oBAAC,iBAAS,GAAC,KAAK,EAAC,mBAAmB,EAAC,WAAW,EAAC,8BAA8B,EAAC,SAAS,EAAC,EAAE,EAAG;gBAC/F,oBAAC,YAAI,GAAC,IAAI,EAAC,EAAE,EAAC,SAAS,EAAC,EAAE,GAAE,gCAA8B,CAAO;gBAAA,qBAAC,EAAE,QAAG;gBAAA,qBAAC,EAAE,QAAG;gBAC7E,oBAAC,cAAM,GACL,GAAG,EAAC,QAAQ,EACZ,OAAO,EAAG,SAAW,EACrB,SAAS,EAAG,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAG,EAC3D,KAAK,EAAC,iBAAiB,EACvB,MAAM,EAAC,IAAI,EACX,OAAO,EAAC,KAAK,EAAG;gBACjB,CAAC;oBACA,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACd,MAAM,CAAC,CACL,oBAAC,cAAM,GAAC,WAAW,EAAC,sBAAsB,EAAC,OAAO,EAAG,KAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,KAAI,CAAG,GAAC,sBAAoB,CAAS,CAC/H,CAAC;oBACJ,CAAC;gBACH,CAAC,CAAC,EAAG,CACD,CACP,CAAC;QACJ,CAAC;QAEO,iDAAqB,GAA7B;YACE,IAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;QACL,CAAC;QAEO,qDAAyB,GAAjC;YACE,IAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,KAAK;aACjB,CAAC,CAAC;QACL,CAAC;QAEO,yDAA6B,GAArC,UAAsC,SAAkB;YAAxD,iBAUC;YATC,IAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,SAAS;aACrB,EAAE;gBACD,IAAI,MAAM,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAI,CAAC,IAAI,CAAC,MAAM,CAAgB,CAAC;gBAEnE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACX,MAAM,CAAC,KAAK,EAAE,CAAC;gBACjB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACH,wBAAC;IAAD,CAvFA,AAuFC,CAvF8C,KAAK,CAAC,SAAS,GAuF7D;IAvFD;uCAuFC,CAAA","file":"demo/pages/FocusTrapZonePage/examples/FocusTrapZone.Box.Click.Example.js","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\n\nimport * as ReactDOM from 'react-dom';\nimport { FocusTrapZone } from '../../../../index';\nimport './FocusTrapZone.Box.Example.scss';\nimport {\n  Button,\n  Link,\n  TextField,\n  Toggle\n} from '../../../../index';\n\nexport interface IBoxNoClickExampleExampleState {\n  isToggled: boolean;\n}\n\nexport default class BoxNoClickExample extends React.Component<React.HTMLProps<HTMLDivElement>, IBoxNoClickExampleExampleState> {\n  public refs: {\n    [key: string]: React.ReactInstance;\n    toggle: HTMLElement;\n  };\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isToggled: false,\n    };\n  }\n\n  public render() {\n    let { isToggled } = this.state;\n\n    return (\n      <div>\n        <Button description='Focuses inside the FocusTrapZone' onClick={ this._onButtonClickHandler.bind(this) }>Go to Trap Zone</Button>\n\n        {(() => {\n          if (isToggled) {\n            return (\n              <FocusTrapZone isClickableOutsideFocusTrap={ true } forceFocusInsideTrap={ false }>\n                { this._internalContents() }\n              </FocusTrapZone>\n              );\n          } else {\n            return (\n              <div>\n                { this._internalContents() }\n              </div>\n            );\n          }\n        })()}\n      </div>\n    );\n  }\n\n  private _internalContents() {\n    let { isToggled } = this.state;\n\n    return (\n      <div className='ms-FocusTrapZoneBoxExample'>\n        <TextField label='Default TextField' placeholder='Input inside Focus Trap Zone' className='' />\n        <Link href='' className='' >Hyperlink inside FocusTrapZone</Link><br /><br />\n        <Toggle\n          ref='toggle'\n          checked={ isToggled }\n          onChanged={ this._onFocusTrapZoneToggleChanged.bind(this) }\n          label='Focus Trap Zone'\n          onText='On'\n          offText='Off' />\n        {(() => {\n          if (isToggled) {\n            return (\n              <Button description='Exit Focus Trap Zone' onClick={ this._onExitButtonClickHandler.bind(this) }>Exit Focus Trap Zone</Button>\n            );\n          }\n        })()}\n      </div>\n    );\n  }\n\n  private _onButtonClickHandler() {\n    this.setState({\n      isToggled: true\n    });\n  }\n\n  private _onExitButtonClickHandler() {\n    this.setState({\n      isToggled: false\n    });\n  }\n\n  private _onFocusTrapZoneToggleChanged(isToggled: boolean) {\n    this.setState({\n      isToggled: isToggled\n    }, () => {\n      let toggle = ReactDOM.findDOMNode(this.refs.toggle) as HTMLElement;\n\n      if (toggle) {\n        toggle.focus();\n      }\n    });\n  }\n}"],"sourceRoot":"../../../../../src"}