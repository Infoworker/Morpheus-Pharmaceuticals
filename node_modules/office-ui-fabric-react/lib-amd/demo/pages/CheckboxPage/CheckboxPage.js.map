{"version":3,"sources":["demo/pages/CheckboxPage/CheckboxPage.tsx"],"names":[],"mappings":";;;;;;;IAYA,IAAM,wBAAwB,GAAG,OAAO,CAAC,uCAAuC,CAAC,CAAC;IAElF;QAAkC,gCAA6C;QAG7E;YACE,iBAAO,CAAC;YACR,IAAI,CAAC,IAAI,GAAG,iCAAqB,CAAC,mBAAQ,EAAE,kBAAkB,EAAE,UAAU,CAAC,CAAC;QAC9E,CAAC;QAEM,6BAAM,GAAb;YACE,MAAM,CAAC,CACL,oBAAC,qBAAa,GACZ,KAAK,EAAC,UAAU,EAChB,aAAa,EAAC,iBAAiB,EAC/B,YAAY,EACV,oBAAC,mBAAW,GAAC,KAAK,EAAC,YAAY,EAAC,IAAI,EAAG,wBAA0B;gBAC/D,oBAAC,6CAAoB,OAAG;aAE3B,EACD,gBAAgB,EACd,oBAAC,0BAAkB,GAAC,aAAa,EAAC,UAAU,EAC7C,EACD,QAAQ,EACN,qBAAC,GAAG;gBACF,qBAAC,CAAC,SACA,sQACF,CAAI;gBAEJ,qBAAC,CAAC,SACA,qNACF,CAAI;gBAEJ,qBAAC,CAAC,SACA,uIACF,CAAI;gBAEJ,qBAAC,CAAC,SACA,oWACF,CAAI;gBAEJ,qBAAC,CAAC,SACA,uJACF,CAAI,CAEP,EACD,aAAa,EACX,qBAAC,GAAG,QACL,EACD,GAAG,EACD,qBAAC,GAAG;gBACF,qBAAC,EAAE;oBACD,qBAAC,EAAE,SAAC,gGAA8F,CAAK;iBACpG;aAER,EACD,KAAK,EACH,qBAAC,GAAG;gBACF,qBAAC,EAAE;oBACD,qBAAC,EAAE,SAAC,yEAAuE,CAAK;oBAChF,qBAAC,EAAE,SAAC,0GAAwG,CAAK;oBACjH,qBAAC,EAAE,SAAC,6FAA2F,CAAK,CACjG;aAER,EACD,OAAO,EACL,qBAAC,CAAC,IAAC,IAAI,EAAC,4FAA4F,GAAC,WAAS,CAC/G,EACD,KAAK,EAAG,IAAI,CAAC,IAAM,EACnB,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAiB,EAChC,CACjB,CAAC;QACJ,CAAC;QACH,mBAAC;IAAD,CAvEA,AAuEC,CAvEiC,KAAK,CAAC,SAAS,GAuEhD;IAvEY,oBAAY,eAuExB,CAAA","file":"demo/pages/CheckboxPage/CheckboxPage.js","sourcesContent":["import * as React from 'react';\nimport {\n  ExampleCard,\n  PropertiesTableSet,\n  ComponentPage\n} from '../../components/index';\n\nimport { CheckboxBasicExample } from './examples/Checkbox.Basic.Example';\nimport { getPageRouteFromState } from '../../utilities/pageroute';\nimport { AppState } from '../../components/App/AppState';\nimport { IComponentDemoPageProps } from '../../components/ComponentPage/IComponentDemoPageProps';\n\nconst CheckboxBasicExampleCode = require('./examples/Checkbox.Basic.Example.tsx');\n\nexport class CheckboxPage extends React.Component<IComponentDemoPageProps, any> {\n  private _url: string;\n\n  constructor() {\n    super();\n    this._url = getPageRouteFromState(AppState, 'Basic components', 'Checkbox');\n  }\n\n  public render() {\n    return (\n      <ComponentPage\n        title='Checkbox'\n        componentName='CheckboxExample'\n        exampleCards={\n          <ExampleCard title='Checkboxes' code={ CheckboxBasicExampleCode }>\n            <CheckboxBasicExample />\n          </ExampleCard>\n        }\n        propertiesTables={\n          <PropertiesTableSet componentName='Checkbox' />\n        }\n        overview={\n          <div>\n            <p>\n              A Checkbox is a UI element that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap. It can also be used to indicate a subordinate setting or preference when paired with another control.\n            </p>\n\n            <p>\n              A Checkbox is used to select or deselect action items. It can be used for a single item or for a list of multiple items that a user can choose from. The control has two selection states: unselected and selected.\n            </p>\n\n            <p>\n              Use a single Checkbox for a subordinate setting, such as with a \"Remember me?\" login scenario or with a terms of service agreement.\n            </p>\n\n            <p>\n              For a binary choice, the main difference between a Checkbox and a toggle switch is that the Checkbox is for status and the toggle switch is for action. You can delay committing a Checkbox interaction (as part of a form submit, for example), while you should immediately commit a toggle switch interaction. Also, only Checkboxes allow for multi-selection.\n            </p>\n\n            <p>\n              Use multiple Checkboxes for multi-select scenarios in which a user chooses one or more items from a group of choices that are not mutually exclusive.\n            </p>\n          </div>\n        }\n        bestPractices={\n          <div></div>\n        }\n        dos={\n          <div>\n            <ul>\n              <li>Allow users to choose any combination of options when several Checkboxes are grouped together.</li>\n            </ul>\n          </div>\n        }\n        donts={\n          <div>\n            <ul>\n              <li>Don't use a Checkbox as an on/off control. Instead use a toggle switch.</li>\n              <li>Donâ€™t use a Checkbox when the user can choose only one option from the group, use radio buttons instead.</li>\n              <li>Don't put two groups of Checkboxes next to each other. Separate the two groups with labels.</li>\n            </ul>\n          </div>\n        }\n        related={\n          <a href='https://github.com/OfficeDev/office-ui-fabric-js/blob/master/ghdocs/components/Checkbox.md'>Fabric JS</a>\n        }\n        route={ this._url }\n        isHeaderVisible={ this.props.isHeaderVisible }>\n      </ComponentPage>\n    );\n  }\n}\n"],"sourceRoot":"../../../../src"}