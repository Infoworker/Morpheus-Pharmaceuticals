{"version":3,"sources":["demo/components/PropertiesTable/PropertiesTableSet.tsx"],"names":[],"mappings":";;;;;;;IASA;QAAwC,sCAAmE;QAKzG,4BAAY,KAA+B;YACzC,kBAAM,KAAK,CAAC,CAAC;YACP,uCAAa,EAAE,mCAAa,CAAW;YAC7C,IAAI,GAAG,CAAC;YACR,IAAI,UAAU,GAAgB,EAAE,CAAC;YAEjC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClB,GAAG,GAAG,OAAO,CAAC,WAAW,GAAG,aAAa,GAAG,aAAa,GAAG,WAAW,CAAC,CAAC;YAC3E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,GAAG,GAAG,OAAO,CAAC,sBAAsB,GAAG,aAAa,GAAG,GAAG,GAAG,aAAa,GAAG,WAAW,CAAC,CAAC;YAC5F,CAAC;YAED,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;gBACrB,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,IAAY;oBACpC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,aAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,UAAU,GAAG,aAAK,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;YAED,IAAI,CAAC,KAAK,GAAG;gBACX,UAAU,EAAE,UAAU;aACvB,CAAC;QACJ,CAAC;QAEM,uCAAU,GAAjB;YAAA,iBAOC;YANC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,IAAe;gBAC/C,OAAA,CAAC,oBAAC,iCAAe,GACf,GAAG,EAAG,IAAI,CAAC,YAAc,EACzB,KAAK,EAAG,IAAI,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,GAAG,QAAQ,CAAC,GAAG,IAAI,CAAC,YAAa,EACnH,UAAU,EAAG,IAAI,CAAC,QAAU,EAC5B,YAAY,EAAG,IAAI,CAAC,YAAY,KAAK,8BAAY,CAAC,IAAM,EAAG,CAAC;YAJ9D,CAI8D,CAAC,CAAC;QACpE,CAAC;QAEM,mCAAM,GAAb;YACE,MAAM,CAAC,CACL,qBAAC,GAAG,SACA,IAAI,CAAC,UAAU,EAAI,CACjB,CACP,CAAC;QACJ,CAAC;QA5Ca,+BAAY,GAAG;YAC3B,KAAK,EAAE,YAAY;SACpB,CAAC;QA2CJ,yBAAC;IAAD,CA9CA,AA8CC,CA9CuC,KAAK,CAAC,SAAS,GA8CtD;IA9CY,0BAAkB,qBA8C9B,CAAA","file":"demo/components/PropertiesTable/PropertiesTableSet.js","sourcesContent":["import * as React from 'react';\nimport { IProperty, PropertyType, PropertiesTable } from './PropertiesTable';\nimport { IPropertiesTableSetProps } from './PropertiesTableSet.Props';\nimport { parse } from '../../utilities/parser/index';\n\nexport interface IPropertiesTableSetState {\n  properties: Array<IProperty>;\n}\n\nexport class PropertiesTableSet extends React.Component<IPropertiesTableSetProps, IPropertiesTableSetState> {\n  public static defaultProps = {\n    title: 'Properties'\n  };\n\n  constructor(props: IPropertiesTableSetProps) {\n    super(props);\n    let { componentName, componentPath } = props;\n    let src;\n    let properties: IProperty[] = [];\n\n    if (componentPath) {\n      src = require('../../../' + componentPath + componentName + '.Props.ts');\n    } else {\n      src = require('../../../components/' + componentName + '/' + componentName + '.Props.ts');\n    }\n\n    if (props.renderOnly) {\n      props.renderOnly.forEach((item: string) => {\n        properties = properties.concat(parse(src, item));\n      });\n    } else {\n      properties = parse(src);\n    }\n\n    this.state = {\n      properties: properties\n    };\n  }\n\n  public renderEach() {\n    return this.state.properties.map((item: IProperty) =>\n      (<PropertiesTable\n        key={ item.propertyName }\n        title={ item.name === ('I' + this.props.componentName) ? (this.props.componentName + ' class') : item.propertyName}\n        properties={ item.property }\n        renderAsEnum={ item.propertyType === PropertyType.enum } />));\n  }\n\n  public render() {\n    return (\n      <div>\n        { this.renderEach() }\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../../src"}