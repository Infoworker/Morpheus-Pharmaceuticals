{"version":3,"sources":["demo/utilities/debugging.ts"],"names":[],"mappings":";;IAEA,0BAAiC,MAAW,EAAE,UAAkB;QAC9D,IAAM,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;QAE1C,MAAM,CAAC,UAAU,CAAC,GAAG;YACnB,WAAI,EAAE,CAAC;YAEP,IAAI,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAClC,IAAI,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACnD,IAAI,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAE7C,+BAA+B;YAC/B,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,OAAO,CAAC,GAAG,CAAK,UAAU,YAAU,EAAE,aAAa,EAAE,CAAC,CAAC;YACzD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC1B,OAAO,CAAC,IAAI,CAAK,UAAU,sBAAmB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,IAAI,OAAK,EAAE,aAAa,EAAE,CAAC,CAAC;YAC1G,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,KAAK,CAAK,UAAU,sBAAmB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,IAAI,OAAK,EAAE,aAAa,EAAE,CAAC,CAAC;YAC3G,CAAC;YACD,8BAA8B;YAE9B,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC,CAAC;IACJ,CAAC;IAtBe,wBAAgB,mBAsB/B,CAAA;IAED;QACE,IAAI,GAAG,GAAG;YACR,KAAK,EAAE,EAAE;SACV,CAAC;QAEF,sCAAsC;QACtC,IAAM,iBAAiB,GAAG,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACrD,qCAAqC;QAErC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACtB,iBAAiB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;YACtC,IAAI,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAE1C,GAAG,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC;QAED,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;IACnB,CAAC;IAjBe,qBAAa,gBAiB5B,CAAA","file":"demo/utilities/debugging.js","sourcesContent":["import { beep } from './beep';\n\nexport function instrumentMethod(target: any, methodName: string) {\n  const originalMethod = target[methodName];\n\n  target[methodName] = function() {\n    beep();\n\n    let startTime = performance.now();\n    let retVal = originalMethod.apply(this, arguments);\n    let duration = performance.now() - startTime;\n\n    /* tslint:disable:no-console */\n    if (duration <= 1) {\n      console.log(`${ methodName } called`, getStackTrace());\n    } else if (duration <= 10) {\n      console.warn(`${ methodName } called, took ${ Math.round(duration * 1000) / 1000 }ms`, getStackTrace());\n    } else {\n      console.error(`${ methodName } called, took ${ Math.round(duration * 1000) / 1000 }ms`, getStackTrace());\n    }\n    /* tslint:enable:no-console */\n\n    return retVal;\n  };\n}\n\nexport function getStackTrace() {\n  let obj = {\n    stack: ''\n  };\n\n  /* tslint:disable:no-string-literal */\n  const captureStackTrace = Error['captureStackTrace'];\n  /* tslint:enable:no-string-literal */\n\n  if (captureStackTrace) {\n    captureStackTrace(obj, getStackTrace);\n    let stackEntries = obj.stack.split('at ');\n\n    obj.stack = stackEntries[2];\n  }\n\n  return obj.stack;\n}\n"],"sourceRoot":"../../../src"}