{"version":3,"sources":["demo/utilities/parser/EnumParserHelper.ts"],"names":[],"mappings":"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","file":"demo/utilities/parser/EnumParserHelper.js","sourcesContent":["import { BaseParser } from './BaseParser';\nimport { IEnumProperty } from '../../components/index';\n\n/**\n * Supporting enum for the parser, used internally within the parser only.\n */\nenum ParseState {\n  default, comment, declaration\n}\n\n/**\n * Helper Parser that parses enums.\n */\nexport class EnumParserHelper extends BaseParser {\n  private _state: ParseState = ParseState.default;\n\n  /**\n   * @constructor\n   * Helper Parser that parses enums.\n   */\n  public constructor(str: string) {\n    super(str);\n  }\n\n  public parse(): Array<IEnumProperty> {\n    let bank: Array<string> = [];\n    let comment = '';\n    let identifierName = '';\n    let returnResult = [];\n    let noClosingSymbolAsterixPrereq = false;\n\n    this.eatUntil(/\\{/);\n    this.eat('{');\n\n    do {\n      switch (this._state) {\n        case ParseState.default:\n          this.eatSpacesAndNewlines();\n          if (this.eat('/')) {\n            if (this.peek() === '*') {\n              this._state = ParseState.comment;\n            } else {\n              // ignore // comments\n              this.eatUntil(/[\\n]/);\n            }\n          } else if (this.eat('}')) {\n            // closing\n            break;\n          } else {\n            this._state = ParseState.declaration;\n          }\n\n          break;\n        case ParseState.comment:\n          {\n            // the initial * are always the first * of a comment, and will be treated as decorative\n            let asterisk = this.eatWhile('*');\n            if ((noClosingSymbolAsterixPrereq || asterisk.length > 0) && this.eat('/')) {\n              // encountered closing comment tag\n              comment = bank.join('').trim();\n              bank = [];\n              this._state = ParseState.default;\n              break;\n            }\n            noClosingSymbolAsterixPrereq = false;\n\n            bank.push(this.eatUntil(/[\\n\\*]/));\n            if (this.peek() === '*') {\n              let tmp = this.eatWhile('*');\n              if (this.peek() !== '/') {\n                // encountered a line like \"* This is a comment with asterisks in the middle **** like this.\"\n                bank.push(tmp);\n              } else {\n                noClosingSymbolAsterixPrereq = true;\n              }\n            } else if (this.peek() === '\\n') {\n              // go to next line\n              this.eatSpacesAndNewlines();\n            }\n          }\n          break;\n        case ParseState.declaration:\n          {\n            this.eatSpacesAndNewlines();\n            let tmp = this.eatUntil(/[,\\s]/);\n            this.next();\n            identifierName = tmp.trim();\n\n            this._state = ParseState.default;\n            returnResult.push(<IEnumProperty>{\n              description: comment,\n              name: identifierName,\n            });\n\n            comment = identifierName = '';\n            break;\n          }\n      }\n    } while (this.hasNext());\n    return returnResult;\n  }\n}\n"],"sourceRoot":"../../../../src"}