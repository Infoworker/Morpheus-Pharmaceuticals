module.exports = "import * as React from 'react';\nimport { Callout } from './Callout';\nimport { CalloutContent } from './CalloutContent';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { IPositionProps } from '../../utilities/positioning';\n\nexport interface ICalloutProps extends React.Props<Callout|CalloutContent>, IPositionProps {\n  /**\n   * Element to anchor the callout to.\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * Indicator of how the callout should be anchored to its targetElement.\n   * @default DirectionalHint.rightCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * The gap space between the target element and the callout.\n   * @default 16\n   */\n  gapSpace?: number;\n\n /**\n   * @deprecated\n   * Deprecated at v0.59.1, to be removed at >= v1.0.0. Pass in a beakWidth to dictate size.\n   */\n  beakStyle?: string;\n\n  /**\n   * The beak width of the selected beakStyle.\n   * @default 28\n   */\n  beakWidth?: number;\n\n  /**\n   * Whether the beak should be visible.\n   * @default true\n   */\n  isBeakVisible?: boolean;\n\n  /**\n   * CSS class to apply to the callout.\n   * @default null\n   */\n  className?: string;\n\n  /**\n   * Optional callback when the layer content has mounted.\n   */\n  onLayerMounted?: () => void;\n\n  /**\n   * Callback when the Callout tries to close.\n   */\n  onDismiss?: (ev?: any) => void;\n\n  /**\n   * If true do not render on a new layer. If false render on a new layer.\n   */\n  doNotLayer?: boolean;\n\n  /**\n   * If true then the callout will attempt to focus the first focusable element that it contains.\n   * If it doesn't find an element, no focus will be set and the method will return false.\n   * This means that it's the contents responsibility to either set focus or have\n   * focusable items.\n   * @returns True if focus was set, false if it was not.\n   */\n  setInitialFocus?: boolean;\n}\n";