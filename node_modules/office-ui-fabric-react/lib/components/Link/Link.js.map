{"version":3,"sources":["components/Link/Link.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,8BAA8B,4BAA4B,CAAC,CAAA;AAC3D,0BAMO,iBAAiB,CAAC,CAAA;AAEzB,QAAO,aAAa,CAAC,CAAA;AASrB;IAA0B,wBAA8B;IAAxD;QAA0B,8BAA8B;IAgDxD,CAAC;IA7CQ,qBAAM,GAAb;QACE,IAAA,eAAwD,EAAlD,sBAAQ,EAAE,sBAAQ,EAAE,wBAAS,EAAE,cAAI,CAAgB;QAEzD,MAAM,CAAC,CACL,IAAI,GAAG,CACL,qBAAC,CAAC,aACA,IAAI,EAAC,MAAM,GACN,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,GACjD,SAAS,EAAG,eAAG,CAAC,SAAS,EAAE,SAAS,EAAE;YACpC,aAAa,EAAE,QAAQ;SACxB,CAAG,EACJ,OAAO,EAAG,IAAI,CAAC,QAAU,EACzB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAG,IAE/B,QAAU,CACV,CACL,GAAG,CACA,qBAAC,MAAM,aACL,IAAI,EAAC,QAAQ,GACR,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,GACjD,SAAS,EAAG,eAAG,CAAC,SAAS,EAAE,SAAS,EAAE;YACpC,aAAa,EAAE,QAAQ;SACxB,CAAG,EACJ,OAAO,EAAG,IAAI,CAAC,QAAU,EACzB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAG,IAE/B,QAAU,CACL,CACV,CAAC,CAAC;IACT,CAAC;IAEM,oBAAK,GAAZ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAGO,uBAAQ,GAAhB,UAAiB,EAA2D;QACpE,gCAAO,CAAgB;QAE7B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,OAAO,CAAC,EAAE,CAAC,CAAC;QACd,CAAC;IACH,CAAC;IAPD;QAAC,oBAAQ;wCAAA;IAQX,WAAC;AAAD,CAhDA,AAgDC,CAhDyB,6BAAa,GAgDtC;AAhDY,YAAI,OAgDhB,CAAA","file":"components/Link/Link.js","sourcesContent":["import * as React from 'react';\nimport { BaseComponent } from '../../common/BaseComponent';\nimport {\n  anchorProperties,\n  autobind,\n  buttonProperties,\n  css,\n  getNativeProps\n} from '../../Utilities';\nimport { ILink, ILinkProps } from './Link.Props';\nimport './Link.scss';\n\ninterface IMyScreen extends Screen {\n  left: number;\n  top: number;\n}\n\ndeclare var screen: IMyScreen;\n\nexport class Link extends BaseComponent<ILinkProps, any> implements ILink {\n  private _link: HTMLElement;\n\n  public render() {\n    let { disabled, children, className, href } = this.props;\n\n    return (\n      href ? (\n        <a\n          role='link'\n          { ...getNativeProps(this.props, anchorProperties) }\n          className={ css('ms-Link', className, {\n            'is-disabled': disabled\n          }) }\n          onClick={ this._onClick }\n          ref={ this._resolveRef('_link') }\n        >\n          { children }\n        </a>\n      ) : (\n          <button\n            role='button'\n            { ...getNativeProps(this.props, buttonProperties) }\n            className={ css('ms-Link', className, {\n              'is-disabled': disabled\n            }) }\n            onClick={ this._onClick }\n            ref={ this._resolveRef('_link') }\n          >\n            { children }\n          </button>\n        ));\n  }\n\n  public focus() {\n    if (this._link) {\n      this._link.focus();\n    }\n  }\n\n  @autobind\n  private _onClick(ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) {\n    let { onClick } = this.props;\n\n    if (onClick) {\n      onClick(ev);\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}