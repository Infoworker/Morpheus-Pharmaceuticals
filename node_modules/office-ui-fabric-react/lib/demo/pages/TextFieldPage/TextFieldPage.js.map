{"version":3,"sources":["demo/pages/TextFieldPage/TextFieldPage.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAIO,wBAAwB,CAAC,CAAA;AAEhC,wCAAsC,oCAAoC,CAAC,CAAA;AAC3E,+CAA6C,2CAA2C,CAAC,CAAA;AACzF,0BAAsC,2BAA2B,CAAC,CAAA;AAClE,yBAAyB,+BAA+B,CAAC,CAAA;AAGzD,IAAM,yBAAyB,GAAG,OAAO,CAAC,wCAAwC,CAAC,CAAC;AACpF,IAAM,gCAAgC,GAAG,OAAO,CAAC,+CAA+C,CAAC,CAAC;AAElG;IAAmC,iCAA6C;IAG9E;QACE,iBAAO,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,iCAAqB,CAAC,mBAAQ,EAAE,kBAAkB,EAAE,WAAW,CAAC,CAAC;IAC/E,CAAC;IAEM,8BAAM,GAAb;QACE,MAAM,CAAC,CACL,oBAAC,qBAAa,GACZ,KAAK,EAAC,WAAW,EACjB,aAAa,EAAC,kBAAkB,EAChC,YAAY,EACV,qBAAC,GAAG;YACF,oBAAC,mBAAW,GAAC,KAAK,EAAC,sBAAsB,EAAC,IAAI,EAAG,yBAA2B;gBAC1E,oBAAC,+CAAqB,OAAG;aACb;YACd,oBAAC,mBAAW,GAAC,KAAK,EAAC,oCAAoC,EAAC,IAAI,EAAG,gCAAkC;gBAC/F,oBAAC,6DAA4B,OAAG;aACpB,CAEjB,EACD,gBAAgB,EACd,oBAAC,0BAAkB,GAAC,aAAa,EAAC,WAAW,EAC9C,EACD,QAAQ,EACN,qBAAC,GAAG;YACF,qBAAC,CAAC,SACA,8OACF,CAAI;SAEP,EACD,aAAa,EACX,qBAAC,GAAG,QACL,EACD,GAAG,EACD,qBAAC,GAAG;YACF,qBAAC,EAAE;gBACD,qBAAC,EAAE,SAAC,2DAAyD,CAAK;gBAClE,qBAAC,EAAE,SAAC,2CAAyC,CAAK;gBAClD,qBAAC,EAAE,SAAC,oFAAkF,CAAK;gBAC3F,qBAAC,EAAE,SAAC,qGAAmG,CAAK;gBAC5G,qBAAC,EAAE,SAAC,6FAA2F,CAAK;gBACpG,qBAAC,EAAE,SAAC,wGAAsG,CAAK;gBAC/G,qBAAC,EAAE,SAAC,uFAAqF,CAAK;gBAC9F,qBAAC,EAAE,SAAC,oDAAkD,CAAK;gBAC3D,qBAAC,EAAE,SAAC,mIAAiI,CAAK;gBAC1I,qBAAC,EAAE,SAAC,sGAAoG,CAAK;gBAC7G,qBAAC,EAAE,SAAC,gGAA8F,CAAK;gBACvG,qBAAC,EAAE,SAAC,iGAA+F,CAAK,CACrG;SAER,EACD,KAAK,EACH,qBAAC,GAAG;YACF,qBAAC,EAAE;gBACD,qBAAC,EAAE,SAAC,iFAA+E,CAAK;gBACxF,qBAAC,EAAE,SAAC,0FAAwF,CAAK;gBACjG,qBAAC,EAAE,SAAC,kDAAgD,CAAK;gBACzD,qBAAC,EAAE,SAAC,2CAAyC,CAAK;gBAClD,qBAAC,EAAE,SAAC,gFAA8E,CAAK,CACpF;SAER,EACD,OAAO,EACL,qBAAC,CAAC,IAAC,IAAI,EAAC,6FAA6F,GAAC,WAAS,CAChH,EACD,KAAK,EAAG,IAAI,CAAC,IAAM,EACnB,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAiB,EAChC,CACjB,CAAC;IACJ,CAAC;IACH,oBAAC;AAAD,CAzEA,AAyEC,CAzEkC,KAAK,CAAC,SAAS,GAyEjD;AAzEY,qBAAa,gBAyEzB,CAAA","file":"demo/pages/TextFieldPage/TextFieldPage.js","sourcesContent":["import * as React from 'react';\nimport {\n  ExampleCard,\n  PropertiesTableSet,\n  ComponentPage\n} from '../../components/index';\n\nimport { TextFieldBasicExample } from './examples/TextField.Basic.Example';\nimport { TextFieldErrorMessageExample } from './examples/TextField.ErrorMessage.Example';\nimport { getPageRouteFromState } from '../../utilities/pageroute';\nimport { AppState } from '../../components/App/AppState';\nimport { IComponentDemoPageProps } from '../../components/ComponentPage/IComponentDemoPageProps';\n\nconst TextFieldBasicExampleCode = require('./examples/TextField.Basic.Example.tsx');\nconst TextFieldErrorMessageExampleCode = require('./examples/TextField.ErrorMessage.Example.tsx');\n\nexport class TextFieldPage extends React.Component<IComponentDemoPageProps, any> {\n  private _url: string;\n\n  constructor() {\n    super();\n    this._url = getPageRouteFromState(AppState, 'Basic components', 'TextField');\n  }\n\n  public render() {\n    return (\n      <ComponentPage\n        title='TextField'\n        componentName='TextFieldExample'\n        exampleCards={\n          <div>\n            <ExampleCard title='TextField variations' code={ TextFieldBasicExampleCode }>\n              <TextFieldBasicExample />\n            </ExampleCard>\n            <ExampleCard title='TextField error message variations' code={ TextFieldErrorMessageExampleCode }>\n              <TextFieldErrorMessageExample />\n            </ExampleCard>\n          </div>\n        }\n        propertiesTables={\n          <PropertiesTableSet componentName='TextField' />\n        }\n        overview={\n          <div>\n            <p>\n              The TextField component enables a user to type text into an app. It's typically used to capture a single line of text, but can be configured to capture multiple lines of text. The text displays on the screen in a simple, uniform format.\n            </p>\n          </div>\n        }\n        bestPractices={\n          <div></div>\n        }\n        dos={\n          <div>\n            <ul>\n              <li>Use the TextField to accept data input on a form or page.</li>\n              <li>Label the TextField with a helpful name. </li>\n              <li>Provide concise helper text that specifies what content is expected to be entered.</li>\n              <li>Provide all appropriate states for the control (static, hover, focus, engaged, unavailable, error).</li>\n              <li>When part of a form, provide clear designations for which fields are required vs. optional.</li>\n              <li>Provide all appropriate methods for submitting provided data (onEnter or a dedicated ‘Submit’ button).</li>\n              <li>Provide all appropriate methods of clearing provided data (‘X’ or something similar).</li>\n              <li>Allow for selection, copy and paste of field data.</li>\n              <li>Whenever possible, format TextField relative to the expected entry (4-digit PIN, 10-digit phone number (3 separate fields), etc).</li>\n              <li>When long entries are expected, provide a mechanism for overflow or expansion of the control itself.</li>\n              <li>Ensure that the TextField is functional through use of mouse/keyboard or touch when available.</li>\n              <li>Ensure that the TextField is accessible through screen reader and/or other accessibility tools.</li>\n            </ul>\n          </div>\n        }\n        donts={\n          <div>\n            <ul>\n              <li>Don’t use a TextField to render basic copy as part of a body element of a page.</li>\n              <li>Don’t provide an unlabeled TextField and expect that users will know what to do with it.</li>\n              <li>Don’t place a TextField inline with body copy.  </li>\n              <li>Don’t be overly verbose with helper text.</li>\n              <li>Don’t occlude the entry or allow entry when the active content is not visible.</li>\n            </ul>\n          </div>\n        }\n        related={\n          <a href='https://github.com/OfficeDev/office-ui-fabric-js/blob/master/ghdocs/components/TextField.md'>Fabric JS</a>\n        }\n        route={ this._url }\n        isHeaderVisible={ this.props.isHeaderVisible }>\n      </ComponentPage>\n    );\n  }\n}\n"],"sourceRoot":"../../../../src"}