{"version":3,"sources":["utilities/properties.test.ts"],"names":[],"mappings":";AAAA,2BAGO,cAAc,CAAC,CAAA;AAEhB,wBAAM,CAAU;AAEtB,QAAQ,CAAC,gBAAgB,EAAE;IAEzB,EAAE,CAAC,4BAA4B,EAAE;QAC/B,IAAI,MAAM,GAAG,2BAAc,CAAkC;YAC3D,oBAAoB,EAAE,CAAC;SACxB,EAAE,0BAAa,CAAC,CAAC;QAClB,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE;QAC/B,IAAI,MAAM,GAAG,2BAAc,CAAkC;YAC3D,YAAY,EAAE,CAAC;SAChB,EAAE,0BAAa,CAAC,CAAC;QAClB,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;QACrD,IAAI,MAAM,GAAG,2BAAc,CAAkC;YAC3D,SAAS,EAAE,KAAK;YAChB,OAAO,EAAE,cAAoB,CAAC;YAC9B,cAAc,EAAE,cAAoB,CAAC;SACtC,EAAE,0BAAa,CAAC,CAAC;QAClB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;QACvE,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC,CAAE,wCAAwC;IACpI,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACrC,IAAI,MAAM,GAAG,2BAAc,CAAkC;YAC3D,QAAQ,EAAE,CAAC;YACX,SAAS,EAAE,IAAI;SAChB,EAAE,0BAAa,CAAC,CAAC;QAClB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,wCAAwC;IACtF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE;QAC3B,IAAI,MAAM,GAAG,2BAAc,CAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QAEnE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC;IAChC,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"utilities/properties.test.js","sourcesContent":["import {\n  getNativeProps,\n  divProperties\n} from './properties';\nimport * as React from 'react';\nlet { expect } = chai;\n\ndescribe('getNativeProps', () => {\n\n  it('can pass through data tags', () => {\n    let result = getNativeProps<React.HTMLProps<HTMLDivElement>>({\n      'data-automation-id': 1\n    }, divProperties);\n    expect(result['data-automation-id']).equals(1);\n  });\n\n  it('can pass through aria tags', () => {\n    let result = getNativeProps<React.HTMLProps<HTMLDivElement>>({\n      'aria-label': 1\n    }, divProperties);\n    expect(result['aria-label']).equals(1);\n  });\n\n  it('can pass through basic div properties and events', () => {\n    let result = getNativeProps<React.HTMLProps<HTMLDivElement>>({\n      className: 'foo',\n      onClick: () => { /* no-op */ },\n      onClickCapture: () => { /* no-op */ }\n    }, divProperties);\n    expect(result.className).equals('foo');\n    expect(result.onClick).is.instanceof(Function, 'onClick not function');\n    expect(result['onClickCapture']).is.instanceof(Function, 'onClickCapture not function');  // tslint:disable-line:no-string-literal\n  });\n\n  it('can remove unexpected properties', () => {\n    let result = getNativeProps<React.HTMLProps<HTMLDivElement>>({\n      'foobar': 1,\n      className: 'hi'\n    }, divProperties);\n    expect(result.className).equals('hi');\n    expect(result['foobar']).equals(undefined); // tslint:disable-line:no-string-literal\n  });\n\n  it('can exclude properties', () => {\n    let result = getNativeProps<any>({ a: 1, b: 2}, ['a', 'b'], ['b']);\n\n    expect(result.a).to.exist;\n    expect(result.b).to.not.exist;\n  });\n\n});"],"sourceRoot":"../../src"}