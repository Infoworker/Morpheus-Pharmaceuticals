{"version":3,"sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,8BAA8B,iBAAiB,CAAC,CAAA;AAChD,oBAA0B,QAAQ,CAAC,CAAA;AAMnC,WAAY,cAAc;IACxB,qDAAS,CAAA;IACT,uDAAU,CAAA;IACV,qDAAS,CAAA;IACT,uDAAU,CAAA;IACV,yDAAW,CAAA;IACX,2DAAY,CAAA;AACd,CAAC,EAPW,sBAAc,KAAd,sBAAc,QAOzB;AAPD,IAAY,cAAc,GAAd,sBAOX,CAAA;AAED,IAAM,yBAAyB,GAAG;IAChC,GAAG;IACH,GAAG;IACH,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,QAAQ;CACT,CAAC;AAEF,IAAI,YAA4B,CAAC;AAEjC;;GAEG;AACH,2BAAkC,cAA8B;IAC9D,YAAY,GAAG,cAAc,CAAC;AAChC,CAAC;AAFe,yBAAiB,oBAEhC,CAAA;AAED,4BAAqF,iBAA4E;IAE/J,MAAM,CAAC;QAAiC,sCAA0C;QAEhF;YACE,iBAAO,CAAC;YACR,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE/E,IAAI,CAAC,KAAK,GAAG;gBACX,cAAc,EAAE,IAAI,CAAC,kBAAkB,EAAE;aAC1C,CAAC;QACJ,CAAC;QAEM,8CAAiB,GAAxB;YAAA,iBAUC;YATC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE;gBAChC,IAAI,cAAc,GAAG,KAAI,CAAC,kBAAkB,EAAE,CAAC;gBAE/C,EAAE,CAAC,CAAC,cAAc,KAAK,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;oBACjD,KAAI,CAAC,QAAQ,CAAC;wBACZ,cAAc,EAAE,cAAc;qBAC/B,CAAC,CAAC;gBACL,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,iDAAoB,GAA3B;YACE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QAEM,mCAAM,GAAb;YACQ,8CAAc,CAAgB;YAEpC,MAAM,CAAC,CACL,oBAAC,iBAAiB,YAAC,GAAG,EAAG,IAAI,CAAC,2BAA6B,EAAC,cAAc,EAAG,cAAgB,GAAM,IAAI,CAAC,KAAK,EAAK,CACnH,CAAC;QACJ,CAAC;QAEO,+CAAkB,GAA1B;YACE,IAAI,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC;YAC1C,IAAI,GAAG,GAAG,eAAS,EAAE,CAAC;YAEtB,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,WAAW,CAAC,CAAC,CAAC;gBAC/B,OAAO,GAAG,CAAC,UAAU,GAAG,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC;oBAClE,cAAc,EAAE,CAAC;gBACnB,CAAC;YACH,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,EAAE,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;oBAC/B,cAAc,GAAG,YAAY,CAAC;gBAChC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,IAAI,KAAK,CACb,4FAA4F;wBAC5F,+DAA+D,CAChE,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,MAAM,CAAC,cAAc,CAAC;QACxB,CAAC;QACH,yBAAC;IAAD,CAxDO,AAwDN,CAxDuC,6BAAa,EAwDpD,CAAC;AACJ,CAAC;AA3De,0BAAkB,qBA2DjC,CAAA","file":"utilities/decorators/withResponsiveMode.js","sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow } from '../dom';\n\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  small = 0,\n  medium = 1,\n  large = 2,\n  xLarge = 3,\n  xxLarge = 4,\n  xxxLarge = 5\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [\n  479,\n  639,\n  1023,\n  1365,\n  1919,\n  99999999\n];\n\nlet _defaultMode: ResponsiveMode;\n\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode) {\n  _defaultMode = responsiveMode;\n}\n\nexport function withResponsiveMode<P extends { responsiveMode?: ResponsiveMode }, S>(ComposedComponent: (new (props: P, ...args: any[]) => React.Component<P, S>)): any {\n\n  return class WithResponsiveMode extends BaseDecorator<P, IWithResponsiveModeState> {\n\n    constructor() {\n      super();\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: this._getResponsiveMode()\n      };\n    }\n\n    public componentDidMount() {\n      this._events.on(window, 'resize', () => {\n        let responsiveMode = this._getResponsiveMode();\n\n        if (responsiveMode !== this.state.responsiveMode) {\n          this.setState({\n            responsiveMode: responsiveMode\n          });\n        }\n      });\n    }\n\n    public componentWillUnmount() {\n      this._events.dispose();\n    }\n\n    public render() {\n      let { responsiveMode } = this.state;\n\n      return (\n        <ComposedComponent ref={ this._updateComposedComponentRef } responsiveMode={ responsiveMode } { ...this.props } />\n      );\n    }\n\n    private _getResponsiveMode(): ResponsiveMode {\n      let responsiveMode = ResponsiveMode.small;\n      let win = getWindow();\n\n      if (typeof win !== 'undefined') {\n        while (win.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n          responsiveMode++;\n        }\n      } else {\n        if (_defaultMode !== undefined) {\n          responsiveMode = _defaultMode;\n        } else {\n          throw new Error(\n            'Content was rendered in a server environment without providing a default responsive mode. ' +\n            'Call setResponsiveMode to define what the responsive mode is.'\n          );\n        }\n      }\n\n      return responsiveMode;\n    }\n  };\n}\n"],"sourceRoot":"../../../src"}